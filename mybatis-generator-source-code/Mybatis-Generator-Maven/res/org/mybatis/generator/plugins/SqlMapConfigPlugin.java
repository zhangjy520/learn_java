// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SqlMapConfigPlugin.java

package org.mybatis.generator.plugins;

import java.util.*;
import org.mybatis.generator.api.*;
import org.mybatis.generator.api.dom.xml.*;
import org.mybatis.generator.internal.util.StringUtility;
import org.mybatis.generator.internal.util.messages.Messages;

public class SqlMapConfigPlugin extends PluginAdapter
{

    public SqlMapConfigPlugin()
    {
        sqlMapFiles = new ArrayList();
    }

    public boolean validate(List warnings)
    {
        boolean valid = true;
        if(!StringUtility.stringHasValue(properties.getProperty("targetProject")))
        {
            warnings.add(Messages.getString("ValidationError.18", "SqlMapConfigPlugin", "targetProject"));
            valid = false;
        }
        if(!StringUtility.stringHasValue(properties.getProperty("targetPackage")))
        {
            warnings.add(Messages.getString("ValidationError.18", "SqlMapConfigPlugin", "targetPackage"));
            valid = false;
        }
        return valid;
    }

    public List contextGenerateAdditionalXmlFiles()
    {
        Document document = new Document("-//ibatis.apache.org//DTD SQL Map Config 2.0//EN", "http://ibatis.apache.org/dtd/sql-map-config-2.dtd");
        XmlElement root = new XmlElement("sqlMapConfig");
        document.setRootElement(root);
        root.addElement(new TextElement("<!--"));
        root.addElement(new TextElement("  This file is generated by MyBatis Generator."));
        root.addElement(new TextElement("  This file is the shell of an SqlMapConfig file - in many cases you will need to add"));
        root.addElement(new TextElement("    to this file before it is usable by iBATIS."));
        StringBuilder sb = new StringBuilder();
        sb.append("  This file was generated on ");
        sb.append(new Date());
        sb.append('.');
        root.addElement(new TextElement(sb.toString()));
        root.addElement(new TextElement("-->"));
        XmlElement settings = new XmlElement("settings");
        settings.addAttribute(new Attribute("useStatementNamespaces", "true"));
        root.addElement(settings);
        XmlElement sqlMap;
        for(Iterator iterator = sqlMapFiles.iterator(); iterator.hasNext(); root.addElement(sqlMap))
        {
            String sqlMapFile = (String)iterator.next();
            sqlMap = new XmlElement("sqlMap");
            sqlMap.addAttribute(new Attribute("resource", sqlMapFile));
        }

        GeneratedXmlFile gxf = new GeneratedXmlFile(document, properties.getProperty("fileName", "SqlMapConfig.xml"), properties.getProperty("targetPackage"), properties.getProperty("targetProject"), false);
        List answer = new ArrayList(1);
        answer.add(gxf);
        return answer;
    }

    public boolean sqlMapGenerated(GeneratedXmlFile sqlMap, IntrospectedTable introspectedTable)
    {
        StringBuilder sb = new StringBuilder();
        sb.append(sqlMap.getTargetPackage());
        sb.append('.');
        String temp = sb.toString();
        sb.setLength(0);
        sb.append(temp.replace('.', '/'));
        sb.append(sqlMap.getFileName());
        sqlMapFiles.add(sb.toString());
        return true;
    }

    private List sqlMapFiles;
}
