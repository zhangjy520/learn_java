{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/concise2/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/jsapi.js","path":"js/jsapi.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/uyan.js","path":"js/uyan.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/plugin/clock.html","path":"plugin/clock.html","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/Ansley Display-Inline.ttf","path":"css/fonts/Ansley Display-Inline.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/Antoine-Bold.ttf","path":"css/fonts/Antoine-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/capitalsregular.ttf","path":"css/fonts/capitalsregular.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/concise2/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/Ansley.jpg","path":"css/fonts/Ansley.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/Yore.jpg","path":"css/fonts/Yore.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/PetitJardin-Regular.ttf","path":"css/fonts/PetitJardin-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/capitalsregular.jpg","path":"css/fonts/capitalsregular.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/PetitJardin.jpg","path":"css/fonts/PetitJardin.jpg","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/Yore Script.ttf","path":"css/fonts/Yore Script.ttf","modified":0,"renderable":1},{"_id":"themes/concise2/source/css/fonts/kaiti.ttf","path":"css/fonts/kaiti.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/concise2/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1470573382000},{"_id":"themes/concise2/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1470573382000},{"_id":"themes/concise2/_config.yml","hash":"9488def5c7d5e9fcba7cf92764467bfd2b5ca7d2","modified":1493889453329},{"_id":"themes/concise2/README_zh.md","hash":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1470573382000},{"_id":"source/_posts/dwr.md","hash":"aaffc91a0f304f56c3d450d9ea756d02d4396a3e","modified":1495435138387},{"_id":"themes/concise2/README.md","hash":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1470573382000},{"_id":"source/_posts/active_mq.md","hash":"da378f88e45453761269b0d78bb49c9bc0f0c0ba","modified":1493952993923},{"_id":"source/_posts/first.md","hash":"e86a97179c09530306c3385bbb99ee08751af53b","modified":1493888728197},{"_id":"source/_posts/fileCount.md","hash":"2f5b93acb1b536ae72b7b2039e63fc1c53660e55","modified":1493886942744},{"_id":"source/_posts/nginx.md","hash":"d520e755a1fd2d248df8a646f31a7bff4fdf1ab0","modified":1493887133857},{"_id":"source/_posts/jdk.md","hash":"942f081fb1970bcbade2fdfb9b96f21aa84a2dbd","modified":1493888434294},{"_id":"themes/concise2/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1470573382000},{"_id":"themes/concise2/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1470573382000},{"_id":"themes/concise2/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1470573382000},{"_id":"themes/concise2/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1470573382000},{"_id":"themes/concise2/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1470573382000},{"_id":"themes/concise2/layout/index.ejs","hash":"3351633f1071449c99ff88aa78bbe9a51f5fca07","modified":1493359400717},{"_id":"source/_posts/java_scroll_pdf.md","hash":"6929c129309c013b4690b071ec5cb1a8470c310c","modified":1493891987802},{"_id":"themes/concise2/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1470573382000},{"_id":"themes/concise2/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1470573382000},{"_id":"themes/concise2/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1470573382000},{"_id":"themes/concise2/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1470573382000},{"_id":"source/_posts/state_design_pattern.md","hash":"b8524df8889d4b48dbbec9c38587031823a0978c","modified":1494236136400},{"_id":"themes/concise2/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1470573382000},{"_id":"source/_posts/data_hub.md","hash":"f70f7f1b34b6471dce782354f7fb56eaad7dafb2","modified":1494407035184},{"_id":"source/_posts/active_mq/user.png","hash":"322b0ad81ae15bc55ed63aeac211cda17e2359cd","modified":1493777959734},{"_id":"source/_posts/nginx/3.png","hash":"f96c17490d00443bec418747f9260dcbba98e665","modified":1493779053869},{"_id":"source/_posts/nginx/5.png","hash":"3644270a459e9b38c18a9c9df5b62d8b23703e56","modified":1493779069082},{"_id":"source/_posts/nginx/7.png","hash":"237eee6b9778c5ddb738d435d1b21653dad5b898","modified":1493779096467},{"_id":"source/_posts/state_design_pattern/3.png","hash":"73e5a55d06abce5fb7b2251d64e6109b2006bc74","modified":1493955778723},{"_id":"source/_posts/state_design_pattern/4.png","hash":"5caf4b9e4408ae953e6b2a244d091004f87e9d3c","modified":1494235171986},{"_id":"source/_posts/nginx/4.png","hash":"e8cac80efe8ed56c6111cddf12c5108d0c73ac50","modified":1493779061851},{"_id":"source/_posts/state_design_pattern/2.png","hash":"af7426d8dc4050d84caaaff0405772f250362f92","modified":1493955773570},{"_id":"themes/concise2/layout/_partial/after_footer.ejs","hash":"fb44e2fd84a07d21652272d439d61ca20621e256","modified":1493367275058},{"_id":"source/_posts/state_design_pattern/1.png","hash":"b13cd856e2e8efeb2dcd68ec351fcb657d8ccbd2","modified":1493955762849},{"_id":"themes/concise2/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/footer.ejs","hash":"af70faf8efb30b47ac9272d9b2d2ae3b3a36a072","modified":1493202800457},{"_id":"themes/concise2/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1493203790444},{"_id":"themes/concise2/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1470573382000},{"_id":"themes/concise2/layout/_widget/weibo.ejs","hash":"70909e81b096bdeb286182f9e355e10ba4239699","modified":1493367508906},{"_id":"themes/concise2/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/search.ejs","hash":"0bb36ba2557953f4ab4f4a9df9be81092bdceaad","modified":1493807403524},{"_id":"themes/concise2/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470573382000},{"_id":"themes/concise2/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470573382000},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1470573382000},{"_id":"themes/concise2/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470573382000},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1470573382000},{"_id":"themes/concise2/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470573382000},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1470573382000},{"_id":"themes/concise2/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1470573382000},{"_id":"themes/concise2/source/img/author.jpg","hash":"ad4d1e7a72db1161002c5e32a58ae7244a672120","modified":1493201905329},{"_id":"themes/concise2/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470573382000},{"_id":"themes/concise2/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470573382000},{"_id":"themes/concise2/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470573382000},{"_id":"themes/concise2/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1470573382000},{"_id":"themes/concise2/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470573382000},{"_id":"themes/concise2/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470573382000},{"_id":"themes/concise2/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470573382000},{"_id":"themes/concise2/source/img/favicon.ico","hash":"d0dcb08d081531e749ecb3aca099cc2e313d7129","modified":1493202479764},{"_id":"themes/concise2/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470573382000},{"_id":"themes/concise2/source/img/logo.png","hash":"56fead4d3d5578026924d44a5d0b58d07f17ff57","modified":1493202446235},{"_id":"themes/concise2/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1470573382000},{"_id":"themes/concise2/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1470573382000},{"_id":"themes/concise2/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1470573382000},{"_id":"themes/concise2/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1470573382000},{"_id":"themes/concise2/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1470573382000},{"_id":"themes/concise2/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1470573382000},{"_id":"themes/concise2/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1470573382000},{"_id":"themes/concise2/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1470573382000},{"_id":"themes/concise2/source/js/jsapi.js","hash":"48622505e8e2a150c7caa7972ee884ab94a9f530","modified":1493807244733},{"_id":"source/_posts/nginx/2.png","hash":"3861ef8aa0a7ae2db185288b0591d5924439c5fc","modified":1493779023430},{"_id":"source/_posts/nginx/1.png","hash":"7e6d1afc199ab651de2c107d7223037cd6149c1d","modified":1493779014652},{"_id":"source/_posts/nginx/6.png","hash":"73cabfc91b1b92cc3a693219d567c67753f1ba6a","modified":1493779077997},{"_id":"source/_posts/active_mq/index.png","hash":"235bd54bd8c847ce54cacdd4415e06a9583ad642","modified":1493777967246},{"_id":"themes/concise2/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1470573382000},{"_id":"themes/concise2/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470573382000},{"_id":"themes/concise2/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1470573382000},{"_id":"themes/concise2/source/js/uyan.js","hash":"81b765838018f35ba6bb6470319f9b15e679283d","modified":1493367296270},{"_id":"themes/concise2/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/post/comment.ejs","hash":"f67bad571aed615abd573f51b37e99d012c15f38","modified":1493360201500},{"_id":"themes/concise2/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1470573382000},{"_id":"themes/concise2/source/plugin/clock.html","hash":"a831afafaa4656de34a9892dc4d0a71283960093","modified":1493203732743},{"_id":"themes/concise2/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1470573382000},{"_id":"themes/concise2/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1470573382000},{"_id":"themes/concise2/source/css/_base/variable.styl","hash":"5e0d1850a10fb7df71e504393af8fcc29ce3edd3","modified":1493196995688},{"_id":"themes/concise2/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1493200556980},{"_id":"themes/concise2/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/header.styl","hash":"a4b8db0822c4190636e69cfc41e0c0a994d6b0e8","modified":1493201528819},{"_id":"themes/concise2/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1470573382000},{"_id":"themes/concise2/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1470573382000},{"_id":"themes/concise2/source/css/fonts/Ansley Display-Inline.ttf","hash":"9c4198e95db3ceb832d7e54b13f6e13c7256673e","modified":1420448666000},{"_id":"themes/concise2/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1470573382000},{"_id":"themes/concise2/source/css/fonts/Antoine-Bold.ttf","hash":"f6056f8c6f268c272a2d1c0d12465862b2bdad89","modified":1442332218000},{"_id":"themes/concise2/source/css/_base/public.styl","hash":"380f059568847203897bd1fa6b2301d76b21e689","modified":1493197932299},{"_id":"themes/concise2/source/css/fonts/capitalsregular.ttf","hash":"09f64c2ae78d662953711656fd306a4d1512955f","modified":1337465808000},{"_id":"themes/concise2/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470573382000},{"_id":"themes/concise2/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470573382000},{"_id":"themes/concise2/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470573382000},{"_id":"themes/concise2/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1470573382000},{"_id":"themes/concise2/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470573382000},{"_id":"themes/concise2/source/css/fonts/Ansley.jpg","hash":"6f6d4ace70fb2a1fb3b51a84209e65a86c7d9e25","modified":1450881123513},{"_id":"themes/concise2/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1470573382000},{"_id":"themes/concise2/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1470573382000},{"_id":"themes/concise2/source/css/fonts/Yore.jpg","hash":"48af544b559ab264df9a5c2a31a1dd3471681858","modified":1481870130414},{"_id":"themes/concise2/source/css/fonts/PetitJardin-Regular.ttf","hash":"340228da9403e5d06208aee116a3417f6ff3e112","modified":1446905796000},{"_id":"themes/concise2/source/css/fonts/capitalsregular.jpg","hash":"af600026befc5d9e00f4cdeded145f7929c2da0c","modified":1476845507943},{"_id":"themes/concise2/source/css/fonts/PetitJardin.jpg","hash":"f4689acc45c75946d9546511224a52f994bd25b3","modified":1451486398426},{"_id":"themes/concise2/source/css/fonts/Yore Script.ttf","hash":"e4d5bb87512789ee435b13a4cd7042b2af8b8741","modified":1350902890000},{"_id":"source/_posts/first/images/tom.png","hash":"db307e512ff71137bf07f9f13a19117a607cfbef","modified":1493695970388},{"_id":"source/_posts/state_design_pattern/几种自动排课算法的比较.pdf","hash":"609dba79ec24b9040462964c17e41513b298934f","modified":1494568458001},{"_id":"themes/concise2/source/css/fonts/kaiti.ttf","hash":"d3a0736027f438306d771cf0965bb309118eb975","modified":1461576244707},{"_id":"public/archives/index.html","hash":"94cb442298f7247a32446d91c1efc25e5ced7619","modified":1495434984838},{"_id":"public/archives/2016/index.html","hash":"9f6b584433e5692e8f113efd04976939210bf848","modified":1495434984912},{"_id":"public/archives/2016/05/index.html","hash":"0cbd1af21ca97c70730aed461fd358bc309f8cb7","modified":1495434984915},{"_id":"public/archives/2017/index.html","hash":"eeda273c9bf38a9ba8571c002b90958ea2ee5ed5","modified":1495434984916},{"_id":"public/archives/2017/04/index.html","hash":"3506ab648d3cfe5c2d57afd8cdd3fd6a1ceac1c1","modified":1495434984916},{"_id":"public/index.html","hash":"8321781966769486097edae3cc3e7d6ea9768a08","modified":1495434984916},{"_id":"public/archives/2017/05/index.html","hash":"c8d9076cce3b141f832ddd1cf128d848cdd4e391","modified":1495434984916},{"_id":"public/tags/java/index.html","hash":"28cd7d40857b0d0abe3d540f009a57fa21ee9313","modified":1495434984916},{"_id":"public/2016/05/03/nginx/index.html","hash":"78aa109407f96320bf9b32c0c977657dd277790b","modified":1495434984917},{"_id":"public/2016/05/03/state_design_pattern/index.html","hash":"3590cb14c32df5aefc6e1be27f933b402e07e359","modified":1495434984919},{"_id":"public/2016/05/03/java_scroll_pdf/index.html","hash":"5986db2ecfd7a52047de223f3d1869b0aefadb9d","modified":1495434984919},{"_id":"public/2017/04/25/first/index.html","hash":"e3a482515aa9accfb48ba05dce30a1ac1b1ffd68","modified":1495434984921},{"_id":"public/2017/04/25/data_hub/index.html","hash":"f8b025f3f27ee610908589b31dffe24f1237658a","modified":1495434984921},{"_id":"public/2017/05/03/fileCount/index.html","hash":"6c0277fc2aed96448dde45de1eb2af85371c52a5","modified":1495434984923},{"_id":"public/2017/05/05/active_mq/index.html","hash":"322549d83eb16db24b6e5c1a864f3ba543e0d273","modified":1495434984923},{"_id":"public/2017/05/05/jdk/index.html","hash":"0076d7fb057a8bd56f39357a29ea074f17dec2ee","modified":1495434984924},{"_id":"public/archives/2016/09/index.html","hash":"aa0ea8b2dd3d8c00fd11c3835765a211f9aaf853","modified":1495434985015},{"_id":"public/tags/server-linux-ubuntu/index.html","hash":"64e23734eefacbd30e2bdf18559a0753c8e84859","modified":1495434985018},{"_id":"public/2016/09/03/dwr/index.html","hash":"67e68d514a27b6b5c95c73f2733986141ac48684","modified":1495434985019},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495434985056},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495434985056},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495434985056},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495434985057},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495434985057},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495434985057},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1495434985057},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1495434985058},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1495434985058},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1495434985058},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1495434985058},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1495434985058},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1495434985058},{"_id":"public/img/author.jpg","hash":"ad4d1e7a72db1161002c5e32a58ae7244a672120","modified":1495434985058},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1495434985058},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1495434985059},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1495434985059},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1495434985059},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1495434985060},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1495434985061},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1495434985061},{"_id":"public/img/favicon.ico","hash":"d0dcb08d081531e749ecb3aca099cc2e313d7129","modified":1495434985061},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1495434985062},{"_id":"public/img/logo.png","hash":"56fead4d3d5578026924d44a5d0b58d07f17ff57","modified":1495434985062},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1495434985062},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1495434985062},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1495434985062},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1495434985063},{"_id":"public/css/fonts/Antoine-Bold.ttf","hash":"f6056f8c6f268c272a2d1c0d12465862b2bdad89","modified":1495434985063},{"_id":"public/css/fonts/Ansley Display-Inline.ttf","hash":"9c4198e95db3ceb832d7e54b13f6e13c7256673e","modified":1495434985063},{"_id":"public/css/fonts/capitalsregular.ttf","hash":"09f64c2ae78d662953711656fd306a4d1512955f","modified":1495434985063},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495434985063},{"_id":"public/2017/05/05/active_mq/user.png","hash":"322b0ad81ae15bc55ed63aeac211cda17e2359cd","modified":1495434985063},{"_id":"public/2016/05/03/nginx/3.png","hash":"f96c17490d00443bec418747f9260dcbba98e665","modified":1495434985063},{"_id":"public/2016/05/03/nginx/4.png","hash":"e8cac80efe8ed56c6111cddf12c5108d0c73ac50","modified":1495434985063},{"_id":"public/2016/05/03/nginx/5.png","hash":"3644270a459e9b38c18a9c9df5b62d8b23703e56","modified":1495434985064},{"_id":"public/2016/05/03/nginx/7.png","hash":"237eee6b9778c5ddb738d435d1b21653dad5b898","modified":1495434985064},{"_id":"public/2016/05/03/state_design_pattern/1.png","hash":"b13cd856e2e8efeb2dcd68ec351fcb657d8ccbd2","modified":1495434985064},{"_id":"public/2016/05/03/state_design_pattern/2.png","hash":"af7426d8dc4050d84caaaff0405772f250362f92","modified":1495434985064},{"_id":"public/2016/05/03/state_design_pattern/3.png","hash":"73e5a55d06abce5fb7b2251d64e6109b2006bc74","modified":1495434985064},{"_id":"public/2016/05/03/state_design_pattern/4.png","hash":"5caf4b9e4408ae953e6b2a244d091004f87e9d3c","modified":1495434985064},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1495434988172},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1495434988176},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1495434988178},{"_id":"public/2017/05/05/active_mq/index.png","hash":"235bd54bd8c847ce54cacdd4415e06a9583ad642","modified":1495434988178},{"_id":"public/2016/05/03/nginx/1.png","hash":"7e6d1afc199ab651de2c107d7223037cd6149c1d","modified":1495434988179},{"_id":"public/2016/05/03/nginx/2.png","hash":"3861ef8aa0a7ae2db185288b0591d5924439c5fc","modified":1495434988179},{"_id":"public/2016/05/03/nginx/6.png","hash":"73cabfc91b1b92cc3a693219d567c67753f1ba6a","modified":1495434988179},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1495434988202},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1495434988202},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1495434988203},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1495434988203},{"_id":"public/plugin/clock.html","hash":"0968d0bbc18d42357948fb9265813544e87d208e","modified":1495434988203},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1495434988203},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1495434988203},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1495434988203},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1495434988204},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1495434988204},{"_id":"public/css/style.css","hash":"e374df55bc60539d7a69f3d82f379d503ce35049","modified":1495434988204},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1495434988204},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1495434988204},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1495434988204},{"_id":"public/js/jsapi.js","hash":"48622505e8e2a150c7caa7972ee884ab94a9f530","modified":1495434988204},{"_id":"public/js/uyan.js","hash":"81b765838018f35ba6bb6470319f9b15e679283d","modified":1495434988204},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1495434988204},{"_id":"public/css/fonts/Ansley.jpg","hash":"6f6d4ace70fb2a1fb3b51a84209e65a86c7d9e25","modified":1495434988204},{"_id":"public/css/fonts/Yore.jpg","hash":"48af544b559ab264df9a5c2a31a1dd3471681858","modified":1495434988204},{"_id":"public/css/fonts/PetitJardin-Regular.ttf","hash":"340228da9403e5d06208aee116a3417f6ff3e112","modified":1495434988204},{"_id":"public/css/fonts/capitalsregular.jpg","hash":"af600026befc5d9e00f4cdeded145f7929c2da0c","modified":1495434988205},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1495434988213},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1495434988213},{"_id":"public/css/fonts/PetitJardin.jpg","hash":"f4689acc45c75946d9546511224a52f994bd25b3","modified":1495434988213},{"_id":"public/css/fonts/Yore Script.ttf","hash":"e4d5bb87512789ee435b13a4cd7042b2af8b8741","modified":1495434988225},{"_id":"public/2017/04/25/first/images/tom.png","hash":"db307e512ff71137bf07f9f13a19117a607cfbef","modified":1495434988238},{"_id":"public/2016/05/03/state_design_pattern/几种自动排课算法的比较.pdf","hash":"609dba79ec24b9040462964c17e41513b298934f","modified":1495434988246},{"_id":"public/css/fonts/kaiti.ttf","hash":"d3a0736027f438306d771cf0965bb309118eb975","modified":1495434988275}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"---\ntitle: 基于dwr的消息推送java web\ndate: 2016-09-03 13:51:49\ntags: java\n--- \n\n1. pom.xml  加依赖\n    ```\n     <!-- https://mvnrepository.com/artifact/org.directwebremoting/dwr -->\n        <dependency>\n            <groupId>org.directwebremoting</groupId>\n            <artifactId>dwr</artifactId>\n            <version>3.0.0-RELEASE</version>\n        </dependency>\n    ```\n2. web.xml\n\n    ```\n     <!--dwr begin config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->\n    <servlet>\n        <display-name>DWR Servlet</display-name>\n        <servlet-name>dwr-invoker</servlet-name>\n        <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <init-param>\n            <param-name>pollAndCometEnabled</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>dwr-invoker</servlet-name>\n        <url-pattern>/dwr/*</url-pattern>\n    </servlet-mapping>\n    <!--dwr end config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->\n    ```\n    \n3. dwr.xml（和web.xml同目录） 注意这里的javascript命名必须和前端导入的js名字一致    \n    ```\n    <!DOCTYPE dwr PUBLIC\n        \"-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN\"\n        \"http://getahead.org/dwr/dwr30.dtd\">\n\n    <dwr>\n    <allow>\n        <!-- 这里的javascript 值就是页面引用的第三个js文件的名称-->\n        <create creator=\"new\" javascript=\"SendMsg\">\n            <param name=\"class\">cc.gukeer.common.dwr.SendMsg</param>\n        </create>\n    </allow>\n    </dwr>\n    ```\n    \n4.  cc.gukeer.common.dwr.SendMsg\n    ```\n        package cc.gukeer.common.dwr;\n\n    import org.directwebremoting.Browser;\n    import org.directwebremoting.ScriptBuffer;\n    import org.directwebremoting.ScriptSession;\n    import org.directwebremoting.ScriptSessionFilter;\n    \n    import javax.servlet.ServletException;\n    import java.util.Collection;\n    import java.util.List;\n    \n    /**\n     * Created by Administrator on 2017/5/22.\n     */\n    public class SendMsg {\n        public void send(final String msg,final List<String> uid) {\n    \n            //过滤器\n            ScriptSessionFilter filter = new ScriptSessionFilter() {\n                public boolean match(ScriptSession scriptSession) {\n                    Object userid= scriptSession.getAttribute(\"uid\");\n                    if (userid == null)\n                        return false;\n                    return uid.contains(userid.toString());\n                }\n            };\n    \n    \n            Runnable run = new Runnable() {\n                private ScriptBuffer script = new ScriptBuffer();\n    \n                @Override\n                public void run() {\n                    script.appendCall(\"show\", msg);\n    \n                    Collection<ScriptSession> sessions = Browser.getTargetSessions();\n    \n                    for (ScriptSession scriptSession : sessions) {\n                        scriptSession.addScript(script);\n                    }\n    \n                }\n            };\n            Browser. withAllSessionsFiltered(filter, run);    //注意这里调用了有filter功能的方法\n    \n        }\n    \n        public void init() throws ServletException {\n            InitUtil initUtil = new InitUtil();\n            initUtil.init();\n        }\n\n    }\n\n    ```\n    \n5.  InitUtil.java\n    ```\n    package cc.gukeer.common.dwr;\n\n    import cc.gukeer.smartBoard.persistence.entity.User;\n    import org.directwebremoting.Container;\n    import org.directwebremoting.ServerContextFactory;\n    import org.directwebremoting.WebContextFactory;\n    import org.directwebremoting.event.ScriptSessionEvent;\n    import org.directwebremoting.event.ScriptSessionListener;\n    import org.directwebremoting.extend.ScriptSessionManager;\n    import org.directwebremoting.servlet.DwrServlet;\n    \n    import javax.servlet.ServletException;\n    import javax.servlet.http.HttpSession;\n    \n    /**\n     * Created by lx on 2017/3/3.\n     */\n    public class InitUtil extends DwrServlet {\n        @Override\n        public void init() throws ServletException {\n            Container container = ServerContextFactory.get().getContainer();\n            // 工厂方法get()返回ServerContext实例\n            ScriptSessionManager manager = container.getBean(ScriptSessionManager.class);\n            ScriptSessionListener listener = new ScriptSessionListener() {\n                public void sessionCreated(ScriptSessionEvent ev) {\n                    HttpSession session = WebContextFactory.get().getSession();\n                    User user = (User) session.getAttribute(\"loginUser\");\n                    ev.getSession().setAttribute(\"uid\",  user.getId());\n                }\n                public void sessionDestroyed(ScriptSessionEvent ev) {\n                    ev.getSession().removeAttribute(\"uid\");\n                }\n            };\n            manager.addScriptSessionListener(listener);\n        }\n        }\n\n\n    ```\n\n6. 后端调用 \n    ```\n        List<String> users = new ArrayList<String>();\n        users.add(\"6\");\n        users.add(\"7\");\n\n        new SendMsg().send(\"测试成功\",users);\n    ```\n\n7. 页面  注意这三个文件，第三个文件本地不存在，但是它的名字必须和 dwr里定义的那个名字一样，参考第二步骤\n    ```\n\t<script type=\"text/javascript\" src=\"${ctx}/dwr/engine.js\"></script>\n    <script type=\"text/javascript\" src=\"${ctx}/dwr/util.js\"></script>\n    <script type=\"text/javascript\" src=\"${ctx}/dwr/interface/SendMsg.js\"></script>\n\t\n\t<script>\n\tdwr.engine.setActiveReverseAjax(true);\n\n    dwr.engine.setNotifyServerOnPageUnload(true);\n\n    function show(msg) {\n        alert(msg);\n    }\n\t\n\t $(function() {\n\n        SendMsg.init();//将当前的uid存到scriptSession中\n\t  });\n\t\n\t</script>\n\t\n    ```\n    ","source":"_posts/dwr.md","raw":"---\ntitle: 基于dwr的消息推送java web\ndate: 2016-09-03 13:51:49\ntags: java\n--- \n\n1. pom.xml  加依赖\n    ```\n     <!-- https://mvnrepository.com/artifact/org.directwebremoting/dwr -->\n        <dependency>\n            <groupId>org.directwebremoting</groupId>\n            <artifactId>dwr</artifactId>\n            <version>3.0.0-RELEASE</version>\n        </dependency>\n    ```\n2. web.xml\n\n    ```\n     <!--dwr begin config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->\n    <servlet>\n        <display-name>DWR Servlet</display-name>\n        <servlet-name>dwr-invoker</servlet-name>\n        <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <init-param>\n            <param-name>pollAndCometEnabled</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>dwr-invoker</servlet-name>\n        <url-pattern>/dwr/*</url-pattern>\n    </servlet-mapping>\n    <!--dwr end config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->\n    ```\n    \n3. dwr.xml（和web.xml同目录） 注意这里的javascript命名必须和前端导入的js名字一致    \n    ```\n    <!DOCTYPE dwr PUBLIC\n        \"-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN\"\n        \"http://getahead.org/dwr/dwr30.dtd\">\n\n    <dwr>\n    <allow>\n        <!-- 这里的javascript 值就是页面引用的第三个js文件的名称-->\n        <create creator=\"new\" javascript=\"SendMsg\">\n            <param name=\"class\">cc.gukeer.common.dwr.SendMsg</param>\n        </create>\n    </allow>\n    </dwr>\n    ```\n    \n4.  cc.gukeer.common.dwr.SendMsg\n    ```\n        package cc.gukeer.common.dwr;\n\n    import org.directwebremoting.Browser;\n    import org.directwebremoting.ScriptBuffer;\n    import org.directwebremoting.ScriptSession;\n    import org.directwebremoting.ScriptSessionFilter;\n    \n    import javax.servlet.ServletException;\n    import java.util.Collection;\n    import java.util.List;\n    \n    /**\n     * Created by Administrator on 2017/5/22.\n     */\n    public class SendMsg {\n        public void send(final String msg,final List<String> uid) {\n    \n            //过滤器\n            ScriptSessionFilter filter = new ScriptSessionFilter() {\n                public boolean match(ScriptSession scriptSession) {\n                    Object userid= scriptSession.getAttribute(\"uid\");\n                    if (userid == null)\n                        return false;\n                    return uid.contains(userid.toString());\n                }\n            };\n    \n    \n            Runnable run = new Runnable() {\n                private ScriptBuffer script = new ScriptBuffer();\n    \n                @Override\n                public void run() {\n                    script.appendCall(\"show\", msg);\n    \n                    Collection<ScriptSession> sessions = Browser.getTargetSessions();\n    \n                    for (ScriptSession scriptSession : sessions) {\n                        scriptSession.addScript(script);\n                    }\n    \n                }\n            };\n            Browser. withAllSessionsFiltered(filter, run);    //注意这里调用了有filter功能的方法\n    \n        }\n    \n        public void init() throws ServletException {\n            InitUtil initUtil = new InitUtil();\n            initUtil.init();\n        }\n\n    }\n\n    ```\n    \n5.  InitUtil.java\n    ```\n    package cc.gukeer.common.dwr;\n\n    import cc.gukeer.smartBoard.persistence.entity.User;\n    import org.directwebremoting.Container;\n    import org.directwebremoting.ServerContextFactory;\n    import org.directwebremoting.WebContextFactory;\n    import org.directwebremoting.event.ScriptSessionEvent;\n    import org.directwebremoting.event.ScriptSessionListener;\n    import org.directwebremoting.extend.ScriptSessionManager;\n    import org.directwebremoting.servlet.DwrServlet;\n    \n    import javax.servlet.ServletException;\n    import javax.servlet.http.HttpSession;\n    \n    /**\n     * Created by lx on 2017/3/3.\n     */\n    public class InitUtil extends DwrServlet {\n        @Override\n        public void init() throws ServletException {\n            Container container = ServerContextFactory.get().getContainer();\n            // 工厂方法get()返回ServerContext实例\n            ScriptSessionManager manager = container.getBean(ScriptSessionManager.class);\n            ScriptSessionListener listener = new ScriptSessionListener() {\n                public void sessionCreated(ScriptSessionEvent ev) {\n                    HttpSession session = WebContextFactory.get().getSession();\n                    User user = (User) session.getAttribute(\"loginUser\");\n                    ev.getSession().setAttribute(\"uid\",  user.getId());\n                }\n                public void sessionDestroyed(ScriptSessionEvent ev) {\n                    ev.getSession().removeAttribute(\"uid\");\n                }\n            };\n            manager.addScriptSessionListener(listener);\n        }\n        }\n\n\n    ```\n\n6. 后端调用 \n    ```\n        List<String> users = new ArrayList<String>();\n        users.add(\"6\");\n        users.add(\"7\");\n\n        new SendMsg().send(\"测试成功\",users);\n    ```\n\n7. 页面  注意这三个文件，第三个文件本地不存在，但是它的名字必须和 dwr里定义的那个名字一样，参考第二步骤\n    ```\n\t<script type=\"text/javascript\" src=\"${ctx}/dwr/engine.js\"></script>\n    <script type=\"text/javascript\" src=\"${ctx}/dwr/util.js\"></script>\n    <script type=\"text/javascript\" src=\"${ctx}/dwr/interface/SendMsg.js\"></script>\n\t\n\t<script>\n\tdwr.engine.setActiveReverseAjax(true);\n\n    dwr.engine.setNotifyServerOnPageUnload(true);\n\n    function show(msg) {\n        alert(msg);\n    }\n\t\n\t $(function() {\n\n        SendMsg.init();//将当前的uid存到scriptSession中\n\t  });\n\t\n\t</script>\n\t\n    ```\n    ","slug":"dwr","published":1,"date":"2017-05-22T06:34:50.250Z","updated":"2017-05-22T06:38:58.387Z","_id":"cj2zrdl7h0000w0viwyf4xris","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: 基于dwr的消息推送java web<br>date: 2016-09-03 13:51:49</p>\n<h2 id=\"tags-java\"><a href=\"#tags-java\" class=\"headerlink\" title=\"tags: java\"></a>tags: java</h2><ol>\n<li><p>pom.xml  加依赖</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.directwebremoting/dwr --&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;org.directwebremoting&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;dwr&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.0.0-RELEASE&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!--dwr begin config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--&gt;</div><div class=\"line\">&lt;servlet&gt;</div><div class=\"line\">    &lt;display-name&gt;DWR Servlet&lt;/display-name&gt;</div><div class=\"line\">    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</div><div class=\"line\">    &lt;servlet-class&gt;org.directwebremoting.servlet.DwrServlet&lt;/servlet-class&gt;</div><div class=\"line\">    &lt;init-param&gt;</div><div class=\"line\">        &lt;param-name&gt;debug&lt;/param-name&gt;</div><div class=\"line\">        &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">    &lt;/init-param&gt;</div><div class=\"line\">    &lt;init-param&gt;</div><div class=\"line\">        &lt;param-name&gt;pollAndCometEnabled&lt;/param-name&gt;</div><div class=\"line\">        &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">    &lt;/init-param&gt;</div><div class=\"line\">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">&lt;/servlet&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\">    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</div><div class=\"line\">    &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div><div class=\"line\">&lt;!--dwr end config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>dwr.xml（和web.xml同目录） 注意这里的javascript命名必须和前端导入的js名字一致     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE dwr PUBLIC</div><div class=\"line\">    &quot;-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN&quot;</div><div class=\"line\">    &quot;http://getahead.org/dwr/dwr30.dtd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dwr&gt;</div><div class=\"line\">&lt;allow&gt;</div><div class=\"line\">    &lt;!-- 这里的javascript 值就是页面引用的第三个js文件的名称--&gt;</div><div class=\"line\">    &lt;create creator=&quot;new&quot; javascript=&quot;SendMsg&quot;&gt;</div><div class=\"line\">        &lt;param name=&quot;class&quot;&gt;cc.gukeer.common.dwr.SendMsg&lt;/param&gt;</div><div class=\"line\">    &lt;/create&gt;</div><div class=\"line\">&lt;/allow&gt;</div><div class=\"line\">&lt;/dwr&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>cc.gukeer.common.dwr.SendMsg<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">    package cc.gukeer.common.dwr;</div><div class=\"line\"></div><div class=\"line\">import org.directwebremoting.Browser;</div><div class=\"line\">import org.directwebremoting.ScriptBuffer;</div><div class=\"line\">import org.directwebremoting.ScriptSession;</div><div class=\"line\">import org.directwebremoting.ScriptSessionFilter;</div><div class=\"line\"></div><div class=\"line\">import javax.servlet.ServletException;</div><div class=\"line\">import java.util.Collection;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by Administrator on 2017/5/22.</div><div class=\"line\"> */</div><div class=\"line\">public class SendMsg &#123;</div><div class=\"line\">    public void send(final String msg,final List&lt;String&gt; uid) &#123;</div><div class=\"line\"></div><div class=\"line\">        //过滤器</div><div class=\"line\">        ScriptSessionFilter filter = new ScriptSessionFilter() &#123;</div><div class=\"line\">            public boolean match(ScriptSession scriptSession) &#123;</div><div class=\"line\">                Object userid= scriptSession.getAttribute(&quot;uid&quot;);</div><div class=\"line\">                if (userid == null)</div><div class=\"line\">                    return false;</div><div class=\"line\">                return uid.contains(userid.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Runnable run = new Runnable() &#123;</div><div class=\"line\">            private ScriptBuffer script = new ScriptBuffer();</div><div class=\"line\"></div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                script.appendCall(&quot;show&quot;, msg);</div><div class=\"line\"></div><div class=\"line\">                Collection&lt;ScriptSession&gt; sessions = Browser.getTargetSessions();</div><div class=\"line\"></div><div class=\"line\">                for (ScriptSession scriptSession : sessions) &#123;</div><div class=\"line\">                    scriptSession.addScript(script);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Browser. withAllSessionsFiltered(filter, run);    //注意这里调用了有filter功能的方法</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void init() throws ServletException &#123;</div><div class=\"line\">        InitUtil initUtil = new InitUtil();</div><div class=\"line\">        initUtil.init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>InitUtil.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cc.gukeer.common.dwr;</div><div class=\"line\"></div><div class=\"line\">import cc.gukeer.smartBoard.persistence.entity.User;</div><div class=\"line\">import org.directwebremoting.Container;</div><div class=\"line\">import org.directwebremoting.ServerContextFactory;</div><div class=\"line\">import org.directwebremoting.WebContextFactory;</div><div class=\"line\">import org.directwebremoting.event.ScriptSessionEvent;</div><div class=\"line\">import org.directwebremoting.event.ScriptSessionListener;</div><div class=\"line\">import org.directwebremoting.extend.ScriptSessionManager;</div><div class=\"line\">import org.directwebremoting.servlet.DwrServlet;</div><div class=\"line\"></div><div class=\"line\">import javax.servlet.ServletException;</div><div class=\"line\">import javax.servlet.http.HttpSession;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by lx on 2017/3/3.</div><div class=\"line\"> */</div><div class=\"line\">public class InitUtil extends DwrServlet &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void init() throws ServletException &#123;</div><div class=\"line\">        Container container = ServerContextFactory.get().getContainer();</div><div class=\"line\">        // 工厂方法get()返回ServerContext实例</div><div class=\"line\">        ScriptSessionManager manager = container.getBean(ScriptSessionManager.class);</div><div class=\"line\">        ScriptSessionListener listener = new ScriptSessionListener() &#123;</div><div class=\"line\">            public void sessionCreated(ScriptSessionEvent ev) &#123;</div><div class=\"line\">                HttpSession session = WebContextFactory.get().getSession();</div><div class=\"line\">                User user = (User) session.getAttribute(&quot;loginUser&quot;);</div><div class=\"line\">                ev.getSession().setAttribute(&quot;uid&quot;,  user.getId());</div><div class=\"line\">            &#125;</div><div class=\"line\">            public void sessionDestroyed(ScriptSessionEvent ev) &#123;</div><div class=\"line\">                ev.getSession().removeAttribute(&quot;uid&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        manager.addScriptSessionListener(listener);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>后端调用 </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; users = new ArrayList&lt;String&gt;();</div><div class=\"line\">users.add(&quot;6&quot;);</div><div class=\"line\">users.add(&quot;7&quot;);</div><div class=\"line\"></div><div class=\"line\">new SendMsg().send(&quot;测试成功&quot;,users);</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面  注意这三个文件，第三个文件本地不存在，但是它的名字必须和 dwr里定义的那个名字一样，参考第二步骤</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/engine.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/util.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/interface/SendMsg.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">dwr.engine.setActiveReverseAjax(true);</div><div class=\"line\"></div><div class=\"line\">   dwr.engine.setNotifyServerOnPageUnload(true);</div><div class=\"line\"></div><div class=\"line\">   function show(msg) &#123;</div><div class=\"line\">       alert(msg);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"> $(function() &#123;</div><div class=\"line\"></div><div class=\"line\">       SendMsg.init();//将当前的uid存到scriptSession中</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: 基于dwr的消息推送java web<br>date: 2016-09-03 13:51:49</p>\n<h2 id=\"tags-java\"><a href=\"#tags-java\" class=\"headerlink\" title=\"tags: java\"></a>tags: java</h2><ol>\n<li><p>pom.xml  加依赖</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.directwebremoting/dwr --&gt;</div><div class=\"line\">   &lt;dependency&gt;</div><div class=\"line\">       &lt;groupId&gt;org.directwebremoting&lt;/groupId&gt;</div><div class=\"line\">       &lt;artifactId&gt;dwr&lt;/artifactId&gt;</div><div class=\"line\">       &lt;version&gt;3.0.0-RELEASE&lt;/version&gt;</div><div class=\"line\">   &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!--dwr begin config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--&gt;</div><div class=\"line\">&lt;servlet&gt;</div><div class=\"line\">    &lt;display-name&gt;DWR Servlet&lt;/display-name&gt;</div><div class=\"line\">    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</div><div class=\"line\">    &lt;servlet-class&gt;org.directwebremoting.servlet.DwrServlet&lt;/servlet-class&gt;</div><div class=\"line\">    &lt;init-param&gt;</div><div class=\"line\">        &lt;param-name&gt;debug&lt;/param-name&gt;</div><div class=\"line\">        &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">    &lt;/init-param&gt;</div><div class=\"line\">    &lt;init-param&gt;</div><div class=\"line\">        &lt;param-name&gt;pollAndCometEnabled&lt;/param-name&gt;</div><div class=\"line\">        &lt;param-value&gt;true&lt;/param-value&gt;</div><div class=\"line\">    &lt;/init-param&gt;</div><div class=\"line\">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class=\"line\">&lt;/servlet&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;servlet-mapping&gt;</div><div class=\"line\">    &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</div><div class=\"line\">    &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt;</div><div class=\"line\">&lt;/servlet-mapping&gt;</div><div class=\"line\">&lt;!--dwr end config!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>dwr.xml（和web.xml同目录） 注意这里的javascript命名必须和前端导入的js名字一致     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE dwr PUBLIC</div><div class=\"line\">    &quot;-//GetAhead Limited//DTD Direct Web Remoting 3.0//EN&quot;</div><div class=\"line\">    &quot;http://getahead.org/dwr/dwr30.dtd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;dwr&gt;</div><div class=\"line\">&lt;allow&gt;</div><div class=\"line\">    &lt;!-- 这里的javascript 值就是页面引用的第三个js文件的名称--&gt;</div><div class=\"line\">    &lt;create creator=&quot;new&quot; javascript=&quot;SendMsg&quot;&gt;</div><div class=\"line\">        &lt;param name=&quot;class&quot;&gt;cc.gukeer.common.dwr.SendMsg&lt;/param&gt;</div><div class=\"line\">    &lt;/create&gt;</div><div class=\"line\">&lt;/allow&gt;</div><div class=\"line\">&lt;/dwr&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>cc.gukeer.common.dwr.SendMsg<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">    package cc.gukeer.common.dwr;</div><div class=\"line\"></div><div class=\"line\">import org.directwebremoting.Browser;</div><div class=\"line\">import org.directwebremoting.ScriptBuffer;</div><div class=\"line\">import org.directwebremoting.ScriptSession;</div><div class=\"line\">import org.directwebremoting.ScriptSessionFilter;</div><div class=\"line\"></div><div class=\"line\">import javax.servlet.ServletException;</div><div class=\"line\">import java.util.Collection;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by Administrator on 2017/5/22.</div><div class=\"line\"> */</div><div class=\"line\">public class SendMsg &#123;</div><div class=\"line\">    public void send(final String msg,final List&lt;String&gt; uid) &#123;</div><div class=\"line\"></div><div class=\"line\">        //过滤器</div><div class=\"line\">        ScriptSessionFilter filter = new ScriptSessionFilter() &#123;</div><div class=\"line\">            public boolean match(ScriptSession scriptSession) &#123;</div><div class=\"line\">                Object userid= scriptSession.getAttribute(&quot;uid&quot;);</div><div class=\"line\">                if (userid == null)</div><div class=\"line\">                    return false;</div><div class=\"line\">                return uid.contains(userid.toString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Runnable run = new Runnable() &#123;</div><div class=\"line\">            private ScriptBuffer script = new ScriptBuffer();</div><div class=\"line\"></div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                script.appendCall(&quot;show&quot;, msg);</div><div class=\"line\"></div><div class=\"line\">                Collection&lt;ScriptSession&gt; sessions = Browser.getTargetSessions();</div><div class=\"line\"></div><div class=\"line\">                for (ScriptSession scriptSession : sessions) &#123;</div><div class=\"line\">                    scriptSession.addScript(script);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Browser. withAllSessionsFiltered(filter, run);    //注意这里调用了有filter功能的方法</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void init() throws ServletException &#123;</div><div class=\"line\">        InitUtil initUtil = new InitUtil();</div><div class=\"line\">        initUtil.init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>InitUtil.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">package cc.gukeer.common.dwr;</div><div class=\"line\"></div><div class=\"line\">import cc.gukeer.smartBoard.persistence.entity.User;</div><div class=\"line\">import org.directwebremoting.Container;</div><div class=\"line\">import org.directwebremoting.ServerContextFactory;</div><div class=\"line\">import org.directwebremoting.WebContextFactory;</div><div class=\"line\">import org.directwebremoting.event.ScriptSessionEvent;</div><div class=\"line\">import org.directwebremoting.event.ScriptSessionListener;</div><div class=\"line\">import org.directwebremoting.extend.ScriptSessionManager;</div><div class=\"line\">import org.directwebremoting.servlet.DwrServlet;</div><div class=\"line\"></div><div class=\"line\">import javax.servlet.ServletException;</div><div class=\"line\">import javax.servlet.http.HttpSession;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by lx on 2017/3/3.</div><div class=\"line\"> */</div><div class=\"line\">public class InitUtil extends DwrServlet &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void init() throws ServletException &#123;</div><div class=\"line\">        Container container = ServerContextFactory.get().getContainer();</div><div class=\"line\">        // 工厂方法get()返回ServerContext实例</div><div class=\"line\">        ScriptSessionManager manager = container.getBean(ScriptSessionManager.class);</div><div class=\"line\">        ScriptSessionListener listener = new ScriptSessionListener() &#123;</div><div class=\"line\">            public void sessionCreated(ScriptSessionEvent ev) &#123;</div><div class=\"line\">                HttpSession session = WebContextFactory.get().getSession();</div><div class=\"line\">                User user = (User) session.getAttribute(&quot;loginUser&quot;);</div><div class=\"line\">                ev.getSession().setAttribute(&quot;uid&quot;,  user.getId());</div><div class=\"line\">            &#125;</div><div class=\"line\">            public void sessionDestroyed(ScriptSessionEvent ev) &#123;</div><div class=\"line\">                ev.getSession().removeAttribute(&quot;uid&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        manager.addScriptSessionListener(listener);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>后端调用 </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; users = new ArrayList&lt;String&gt;();</div><div class=\"line\">users.add(&quot;6&quot;);</div><div class=\"line\">users.add(&quot;7&quot;);</div><div class=\"line\"></div><div class=\"line\">new SendMsg().send(&quot;测试成功&quot;,users);</div></pre></td></tr></table></figure>\n</li>\n<li><p>页面  注意这三个文件，第三个文件本地不存在，但是它的名字必须和 dwr里定义的那个名字一样，参考第二步骤</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/engine.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/util.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;ctx&#125;/dwr/interface/SendMsg.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">dwr.engine.setActiveReverseAjax(true);</div><div class=\"line\"></div><div class=\"line\">   dwr.engine.setNotifyServerOnPageUnload(true);</div><div class=\"line\"></div><div class=\"line\">   function show(msg) &#123;</div><div class=\"line\">       alert(msg);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"> $(function() &#123;</div><div class=\"line\"></div><div class=\"line\">       SendMsg.init();//将当前的uid存到scriptSession中</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"active mq安装 -ubuntu","date":"2017-05-05T05:51:49.000Z","_content":"\n## 1下载activemq \n```\nwget http://archive.apache.org/dist/activemq/apache-activemq/5.6.0/apache-activemq-5.6.0-bin.tar.gz\n```\n## 2.解压\n```\ntar zxf apache-activemq-5.6.0-bin.tar.gz\n```\n## 3.进入解压后的activemq/bin目录,启动mq\n```\nsudo ./activemq start\n```\n## 5.测试是否启动成功\n\n  现在本机telnet一下端口是否正常\n```\ntelnet 本机IP 8161\n```\n 再访问一下主页，一切正常！\n\n\n![logo](active_mq/index.png)\n \n\n更新1.0：\n\n　　ubuntu上activemq和windows上不一样，默认登陆时不需要验证的，为了安全起见，建议修改下配置。\n\n### 　　1.config文件夹下的jetty.xml，authenticate 值改成true\n \n\n       2.config文件夹下的 jetty-realm.properties ，修改下用户和密码\n![logo](active_mq/user.png)\n\n\n更新1.1：\n\t## tcp长链接需要新增用户，/activemq/conf/activemq.xml   注意这个配置位置必须如下\n\t```\n\t\t  <persistenceAdapter>\n            <kahaDB directory=\"${activemq.base}/data/kahadb\"/>\n        </persistenceAdapter>\n        \n         ==<plugins>\n             <simpleAuthenticationPlugin>\n                 <users>\n                     <authenticationUser username=\"lxsoft\" password=\"lxtest\" groups=\"users,admins\"/>\n                 </users>\n             </simpleAuthenticationPlugin>\n         </plugins>==\n        \n          <!--\n            The systemUsage controls the maximum amount of space the broker will \n            use before slowing down producers. For more information, see:\n            \n            http://activemq.apache.org/producer-flow-control.html\n             \n        <systemUsage>\n\n\t```","source":"_posts/active_mq.md","raw":"---\ntitle: active mq安装 -ubuntu\ndate: 2017-05-05 13:51:49\ntags: server,linux,ubuntu\n---\n\n## 1下载activemq \n```\nwget http://archive.apache.org/dist/activemq/apache-activemq/5.6.0/apache-activemq-5.6.0-bin.tar.gz\n```\n## 2.解压\n```\ntar zxf apache-activemq-5.6.0-bin.tar.gz\n```\n## 3.进入解压后的activemq/bin目录,启动mq\n```\nsudo ./activemq start\n```\n## 5.测试是否启动成功\n\n  现在本机telnet一下端口是否正常\n```\ntelnet 本机IP 8161\n```\n 再访问一下主页，一切正常！\n\n\n![logo](active_mq/index.png)\n \n\n更新1.0：\n\n　　ubuntu上activemq和windows上不一样，默认登陆时不需要验证的，为了安全起见，建议修改下配置。\n\n### 　　1.config文件夹下的jetty.xml，authenticate 值改成true\n \n\n       2.config文件夹下的 jetty-realm.properties ，修改下用户和密码\n![logo](active_mq/user.png)\n\n\n更新1.1：\n\t## tcp长链接需要新增用户，/activemq/conf/activemq.xml   注意这个配置位置必须如下\n\t```\n\t\t  <persistenceAdapter>\n            <kahaDB directory=\"${activemq.base}/data/kahadb\"/>\n        </persistenceAdapter>\n        \n         ==<plugins>\n             <simpleAuthenticationPlugin>\n                 <users>\n                     <authenticationUser username=\"lxsoft\" password=\"lxtest\" groups=\"users,admins\"/>\n                 </users>\n             </simpleAuthenticationPlugin>\n         </plugins>==\n        \n          <!--\n            The systemUsage controls the maximum amount of space the broker will \n            use before slowing down producers. For more information, see:\n            \n            http://activemq.apache.org/producer-flow-control.html\n             \n        <systemUsage>\n\n\t```","slug":"active_mq","published":1,"updated":"2017-05-05T02:56:33.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdl7u0001w0vir5j6nvjz","content":"<h2 id=\"1下载activemq\"><a href=\"#1下载activemq\" class=\"headerlink\" title=\"1下载activemq\"></a>1下载activemq</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://archive.apache.org/dist/activemq/apache-activemq/5.6.0/apache-activemq-5.6.0-bin.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"2-解压\"><a href=\"#2-解压\" class=\"headerlink\" title=\"2.解压\"></a>2.解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxf apache-activemq-5.6.0-bin.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"3-进入解压后的activemq-bin目录-启动mq\"><a href=\"#3-进入解压后的activemq-bin目录-启动mq\" class=\"headerlink\" title=\"3.进入解压后的activemq/bin目录,启动mq\"></a>3.进入解压后的activemq/bin目录,启动mq</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./activemq start</div></pre></td></tr></table></figure>\n<h2 id=\"5-测试是否启动成功\"><a href=\"#5-测试是否启动成功\" class=\"headerlink\" title=\"5.测试是否启动成功\"></a>5.测试是否启动成功</h2><p>  现在本机telnet一下端口是否正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 本机IP 8161</div></pre></td></tr></table></figure></p>\n<p> 再访问一下主页，一切正常！</p>\n<p><img src=\"/2017/05/05/active_mq/index.png\" alt=\"logo\"></p>\n<p>更新1.0：</p>\n<p>　　ubuntu上activemq和windows上不一样，默认登陆时不需要验证的，为了安全起见，建议修改下配置。</p>\n<h3 id=\"1-config文件夹下的jetty-xml，authenticate-值改成true\"><a href=\"#1-config文件夹下的jetty-xml，authenticate-值改成true\" class=\"headerlink\" title=\"　　1.config文件夹下的jetty.xml，authenticate 值改成true\"></a>　　1.config文件夹下的jetty.xml，authenticate 值改成true</h3><pre><code>2.config文件夹下的 jetty-realm.properties ，修改下用户和密码\n</code></pre><p><img src=\"/2017/05/05/active_mq/user.png\" alt=\"logo\"></p>\n<p>更新1.1：</p>\n<pre><code>## tcp长链接需要新增用户，/activemq/conf/activemq.xml   注意这个配置位置必须如下\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;persistenceAdapter&gt;</div><div class=\"line\">        &lt;kahaDB directory=&quot;$&#123;activemq.base&#125;/data/kahadb&quot;/&gt;</div><div class=\"line\">    &lt;/persistenceAdapter&gt;</div><div class=\"line\">    </div><div class=\"line\">     ==&lt;plugins&gt;</div><div class=\"line\">         &lt;simpleAuthenticationPlugin&gt;</div><div class=\"line\">             &lt;users&gt;</div><div class=\"line\">                 &lt;authenticationUser username=&quot;lxsoft&quot; password=&quot;lxtest&quot; groups=&quot;users,admins&quot;/&gt;</div><div class=\"line\">             &lt;/users&gt;</div><div class=\"line\">         &lt;/simpleAuthenticationPlugin&gt;</div><div class=\"line\">     &lt;/plugins&gt;==</div><div class=\"line\">    </div><div class=\"line\">      &lt;!--</div><div class=\"line\">        The systemUsage controls the maximum amount of space the broker will </div><div class=\"line\">        use before slowing down producers. For more information, see:</div><div class=\"line\">        </div><div class=\"line\">        http://activemq.apache.org/producer-flow-control.html</div><div class=\"line\">         </div><div class=\"line\">    &lt;systemUsage&gt;</div></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1下载activemq\"><a href=\"#1下载activemq\" class=\"headerlink\" title=\"1下载activemq\"></a>1下载activemq</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://archive.apache.org/dist/activemq/apache-activemq/5.6.0/apache-activemq-5.6.0-bin.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"2-解压\"><a href=\"#2-解压\" class=\"headerlink\" title=\"2.解压\"></a>2.解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxf apache-activemq-5.6.0-bin.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"3-进入解压后的activemq-bin目录-启动mq\"><a href=\"#3-进入解压后的activemq-bin目录-启动mq\" class=\"headerlink\" title=\"3.进入解压后的activemq/bin目录,启动mq\"></a>3.进入解压后的activemq/bin目录,启动mq</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./activemq start</div></pre></td></tr></table></figure>\n<h2 id=\"5-测试是否启动成功\"><a href=\"#5-测试是否启动成功\" class=\"headerlink\" title=\"5.测试是否启动成功\"></a>5.测试是否启动成功</h2><p>  现在本机telnet一下端口是否正常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 本机IP 8161</div></pre></td></tr></table></figure></p>\n<p> 再访问一下主页，一切正常！</p>\n<p><img src=\"/2017/05/05/active_mq/index.png\" alt=\"logo\"></p>\n<p>更新1.0：</p>\n<p>　　ubuntu上activemq和windows上不一样，默认登陆时不需要验证的，为了安全起见，建议修改下配置。</p>\n<h3 id=\"1-config文件夹下的jetty-xml，authenticate-值改成true\"><a href=\"#1-config文件夹下的jetty-xml，authenticate-值改成true\" class=\"headerlink\" title=\"　　1.config文件夹下的jetty.xml，authenticate 值改成true\"></a>　　1.config文件夹下的jetty.xml，authenticate 值改成true</h3><pre><code>2.config文件夹下的 jetty-realm.properties ，修改下用户和密码\n</code></pre><p><img src=\"/2017/05/05/active_mq/user.png\" alt=\"logo\"></p>\n<p>更新1.1：</p>\n<pre><code>## tcp长链接需要新增用户，/activemq/conf/activemq.xml   注意这个配置位置必须如下\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;persistenceAdapter&gt;</div><div class=\"line\">        &lt;kahaDB directory=&quot;$&#123;activemq.base&#125;/data/kahadb&quot;/&gt;</div><div class=\"line\">    &lt;/persistenceAdapter&gt;</div><div class=\"line\">    </div><div class=\"line\">     ==&lt;plugins&gt;</div><div class=\"line\">         &lt;simpleAuthenticationPlugin&gt;</div><div class=\"line\">             &lt;users&gt;</div><div class=\"line\">                 &lt;authenticationUser username=&quot;lxsoft&quot; password=&quot;lxtest&quot; groups=&quot;users,admins&quot;/&gt;</div><div class=\"line\">             &lt;/users&gt;</div><div class=\"line\">         &lt;/simpleAuthenticationPlugin&gt;</div><div class=\"line\">     &lt;/plugins&gt;==</div><div class=\"line\">    </div><div class=\"line\">      &lt;!--</div><div class=\"line\">        The systemUsage controls the maximum amount of space the broker will </div><div class=\"line\">        use before slowing down producers. For more information, see:</div><div class=\"line\">        </div><div class=\"line\">        http://activemq.apache.org/producer-flow-control.html</div><div class=\"line\">         </div><div class=\"line\">    &lt;systemUsage&gt;</div></pre></td></tr></table></figure>\n</code></pre>"},{"title":"服务器上的容器部署技术-docker","date":"2017-04-25T05:51:49.000Z","_content":"以下文章了解之后你可以在服务器上部署项目，本地不需要安装 tomcat，jdk，mysql等服务器，通过docker可以一键解决\t\n \n ## 快速入门\n \n \n### 安装docker\n\n```\n$ apt install docker.io -y\n```\n\n若找不到资源，需要更新资源库，命令为：\n``` bash\n$ sudo apt-get update && sudo apt-get upgrade\n```\n\n### 查看docker版本\n\n```\n$ docker -v\n```\n更多的docker相关知识请关注：https://www.docker.com/\n\n### docker安装mysql\n\n```\n$ docker pull mysql\n```\n\n\n### docker安装tomcat\n\n```\n$ docker pull tomcat\n```\n\n### 启动实例\ndocker 拉取了以上两个容器镜像之后，通过如下命令能获取到镜像列表\n```\n$ docker images -a\n```\n可以看到之前拉去到本地的两个镜像，接下来分别启动tomcat，mysql的实例，命令如下：\n启动一个docker实例\n```\n$ sudo docker run --name image_nick_name image_name:image_tag\n```\n\n启动mysql：\n```\n$ sudo docker run --name mysql -p 3400:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest\n``` \n启动tomcat：\n```\n$ sudo docker run -it -d --name tomcat tomcat:latest\n``` \n在启动之后，该服务器上即可成功访问到tomcat和mysql\n连接mysql：\n```\n$ mysql -u root -h 114.215.29.39 -P 3400  -p123456\n```\n访问ip：http://114.215.29.39:10050/ 即可出现如下页面：\n![logo](first/images/tom.png)","source":"_posts/first.md","raw":"---\ntitle: 服务器上的容器部署技术-docker\ndate: 2017-04-25 13:51:49\ntags: server,linux,ubuntu\n---\n以下文章了解之后你可以在服务器上部署项目，本地不需要安装 tomcat，jdk，mysql等服务器，通过docker可以一键解决\t\n \n ## 快速入门\n \n \n### 安装docker\n\n```\n$ apt install docker.io -y\n```\n\n若找不到资源，需要更新资源库，命令为：\n``` bash\n$ sudo apt-get update && sudo apt-get upgrade\n```\n\n### 查看docker版本\n\n```\n$ docker -v\n```\n更多的docker相关知识请关注：https://www.docker.com/\n\n### docker安装mysql\n\n```\n$ docker pull mysql\n```\n\n\n### docker安装tomcat\n\n```\n$ docker pull tomcat\n```\n\n### 启动实例\ndocker 拉取了以上两个容器镜像之后，通过如下命令能获取到镜像列表\n```\n$ docker images -a\n```\n可以看到之前拉去到本地的两个镜像，接下来分别启动tomcat，mysql的实例，命令如下：\n启动一个docker实例\n```\n$ sudo docker run --name image_nick_name image_name:image_tag\n```\n\n启动mysql：\n```\n$ sudo docker run --name mysql -p 3400:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest\n``` \n启动tomcat：\n```\n$ sudo docker run -it -d --name tomcat tomcat:latest\n``` \n在启动之后，该服务器上即可成功访问到tomcat和mysql\n连接mysql：\n```\n$ mysql -u root -h 114.215.29.39 -P 3400  -p123456\n```\n访问ip：http://114.215.29.39:10050/ 即可出现如下页面：\n![logo](first/images/tom.png)","slug":"first","published":1,"updated":"2017-05-04T09:05:28.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdl870003w0vi1l9oytql","content":"<p>以下文章了解之后你可以在服务器上部署项目，本地不需要安装 tomcat，jdk，mysql等服务器，通过docker可以一键解决    </p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt install docker.io -y</div></pre></td></tr></table></figure>\n<p>若找不到资源，需要更新资源库，命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</div></pre></td></tr></table></figure></p>\n<h3 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker -v</div></pre></td></tr></table></figure>\n<p>更多的docker相关知识请关注：<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">https://www.docker.com/</a></p>\n<h3 id=\"docker安装mysql\"><a href=\"#docker安装mysql\" class=\"headerlink\" title=\"docker安装mysql\"></a>docker安装mysql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker pull mysql</div></pre></td></tr></table></figure>\n<h3 id=\"docker安装tomcat\"><a href=\"#docker安装tomcat\" class=\"headerlink\" title=\"docker安装tomcat\"></a>docker安装tomcat</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker pull tomcat</div></pre></td></tr></table></figure>\n<h3 id=\"启动实例\"><a href=\"#启动实例\" class=\"headerlink\" title=\"启动实例\"></a>启动实例</h3><p>docker 拉取了以上两个容器镜像之后，通过如下命令能获取到镜像列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker images -a</div></pre></td></tr></table></figure></p>\n<p>可以看到之前拉去到本地的两个镜像，接下来分别启动tomcat，mysql的实例，命令如下：<br>启动一个docker实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo docker run --name image_nick_name image_name:image_tag</div></pre></td></tr></table></figure></p>\n<p>启动mysql：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo docker run --name mysql -p 3400:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</div><div class=\"line\">``` </div><div class=\"line\">启动tomcat：</div></pre></td></tr></table></figure></p>\n<p>$ sudo docker run -it -d –name tomcat tomcat:latest<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在启动之后，该服务器上即可成功访问到tomcat和mysql</div><div class=\"line\">连接mysql：</div></pre></td></tr></table></figure></p>\n<p>$ mysql -u root -h 114.215.29.39 -P 3400  -p123456<br>```<br>访问ip：<a href=\"http://114.215.29.39:10050/\" target=\"_blank\" rel=\"external\">http://114.215.29.39:10050/</a> 即可出现如下页面：<br><img src=\"/2017/04/25/first/images/tom.png\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下文章了解之后你可以在服务器上部署项目，本地不需要安装 tomcat，jdk，mysql等服务器，通过docker可以一键解决    </p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt install docker.io -y</div></pre></td></tr></table></figure>\n<p>若找不到资源，需要更新资源库，命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</div></pre></td></tr></table></figure></p>\n<h3 id=\"查看docker版本\"><a href=\"#查看docker版本\" class=\"headerlink\" title=\"查看docker版本\"></a>查看docker版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker -v</div></pre></td></tr></table></figure>\n<p>更多的docker相关知识请关注：<a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n<h3 id=\"docker安装mysql\"><a href=\"#docker安装mysql\" class=\"headerlink\" title=\"docker安装mysql\"></a>docker安装mysql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker pull mysql</div></pre></td></tr></table></figure>\n<h3 id=\"docker安装tomcat\"><a href=\"#docker安装tomcat\" class=\"headerlink\" title=\"docker安装tomcat\"></a>docker安装tomcat</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker pull tomcat</div></pre></td></tr></table></figure>\n<h3 id=\"启动实例\"><a href=\"#启动实例\" class=\"headerlink\" title=\"启动实例\"></a>启动实例</h3><p>docker 拉取了以上两个容器镜像之后，通过如下命令能获取到镜像列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker images -a</div></pre></td></tr></table></figure></p>\n<p>可以看到之前拉去到本地的两个镜像，接下来分别启动tomcat，mysql的实例，命令如下：<br>启动一个docker实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo docker run --name image_nick_name image_name:image_tag</div></pre></td></tr></table></figure></p>\n<p>启动mysql：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo docker run --name mysql -p 3400:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</div><div class=\"line\">``` </div><div class=\"line\">启动tomcat：</div></pre></td></tr></table></figure></p>\n<p>$ sudo docker run -it -d –name tomcat tomcat:latest<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在启动之后，该服务器上即可成功访问到tomcat和mysql</div><div class=\"line\">连接mysql：</div></pre></td></tr></table></figure></p>\n<p>$ mysql -u root -h 114.215.29.39 -P 3400  -p123456<br>```<br>访问ip：<a href=\"http://114.215.29.39:10050/\">http://114.215.29.39:10050/</a> 即可出现如下页面：<br><img src=\"/2017/04/25/first/images/tom.png\" alt=\"logo\"></p>\n"},{"title":"java 文件统计功能","date":"2017-05-03T05:51:49.000Z","_content":" 刚开始项目经理需要==统计项目代码行数==，所以写了这个类用来实现这个需求\n\n## 原理：\n参数  项目路径，需要统计的文件后缀名的集合\n  递归遍历项目路径下的所有文件直到找不到文件为止！\n## 核心方法：\n-   new File(path).listFiles();   获取这个路径下的文件数组  File[] \n-   遍历这个文件数组，如果是文件并且符合后缀名集合，加入到 全局变量 List<File> 里面去。如果是文件夹继续递归判断\n-   最终得到一个符合 所有后缀名，并且在指定路径下的所有文件 集合\n-   最后将这个集合通过文件流读取，来计算行数 FileReader（file）\n  \n  \n## 拓展: \n在使用fileReader的时候，因为读取文件是按行。所以可作为全文索引工具类。\n全局搜索项目里面的字符串。定位哪个文件的哪一行有指定的字符串\n\n## 类似应用：\n\nspring的包扫描原理\n扫描controller包下的所有class文件，并且判断它们是否是 isAnnoationCLass（Controller.class）注解类  递归\n\n仿照spring做的类扫描器代码如下：\n\n ```   \n package org.smart4j.framework.util;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic final class ClassUtil {\n\t\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CastUtil.class);\n\t\n\t/**\n\t * 获取类加载器\n\t */\n\tpublic static ClassLoader getClassLoader(){\n\t\treturn Thread.currentThread().getContextClassLoader();\n\t}\n\t\n\t/**\n\t * 加载类\n\t */\n\tpublic static Class<?> loadClass(String className, boolean isInitialized){\n\t\tClass<?> cls;\n\t\ttry {\n\t\t\tcls = Class.forName(className, isInitialized, getClassLoader());\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"load class fail\", e);\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\treturn cls;\n\t}\n\t\n\t/**\n\t * 加载类\n\t * @param className\n\t * @return\n\t */\n\tpublic static Class<?> loadClass(String className) {\n\t\treturn loadClass(className, true);\n\t}\n\t\n\t/**\n\t * 获取指定包下的所有类\n\t */\n\tpublic static Set<Class<?>> getClassSet(String packageName){\n\t\tSet<Class<?>> classSet = new HashSet<Class<?>>();\n\t\ttry {\n\t\t\tEnumeration<URL> urls = getClassLoader().getResources(packageName.replace(\".\", \"/\"));\n\t\t\twhile(urls.hasMoreElements()){\n\t\t\t\tURL url = urls.nextElement();\n\t\t\t\tif(null != url){\n\t\t\t\t\tString protocol = url.getProtocol();\n\t\t\t\t\tif(\"file\".equals(protocol)){\n\t\t\t\t\t\tString packagePath = url.getPath().replaceAll(\"%20\", \"\");\n\t\t\t\t\t\taddClass(classSet, packagePath, packageName);\n\t\t\t\t\t}else if(\"jar\".equals(protocol)){\n\t\t\t\t\t\tJarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();\n\t\t\t\t\t\tif(null!=jarURLConnection){\n\t\t\t\t\t\t\tJarFile jarFile = jarURLConnection.getJarFile();\n\t\t\t\t\t\t\tif(null!=jarFile){\n\t\t\t\t\t\t\t\tEnumeration<JarEntry> jarEntries = jarFile.entries();\n\t\t\t\t\t\t\t\twhile(jarEntries.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tJarEntry jarEntry = jarEntries.nextElement();\n\t\t\t\t\t\t\t\t\tString jarEntryName = jarEntry.getName();\n\t\t\t\t\t\t\t\t\tif(\".class\".endsWith(jarEntryName)){\n\t\t\t\t\t\t\t\t\t\tString className = jarEntryName.substring(0, jarEntryName.lastIndexOf(\".\")).replaceAll(\"/\", \".\");\n\t\t\t\t\t\t\t\t\taddClass(classSet, className);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"get class set fail\", e);\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\treturn classSet;\n\t}\n\t\n\tprivate static void addClass(Set<Class<?>> classSet, String packagePath, String packageName){\n\t\tFile[] files = new File(packagePath).listFiles(new FileFilter() {\n\n\t\t\t@Override\n\t\t\tpublic boolean accept(File file) {\n\t\t\t\treturn (file.isFile() && file.getName().endsWith(\".class\")) || (\n\t\t\t\t\t\tfile.isDirectory());\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tfor(File file : files){\n\t\t\tString fileName = file.getName();\n\t\t\tif(file.isFile()){\n\t\t\t\tString className = fileName.substring(0, fileName.lastIndexOf(\".\"));\n\t\t\t\tif(StringUtil.isNotEmpty(className)){\n\t\t\t\t\tclassName = packageName + \".\" + className;\n\t\t\t\t}\n\t\t\t\taddClass(classSet, className);\n\t\t\t}else{\n\t\t\t\tString subPackagePath = fileName;\n\t\t\t\tif(StringUtil.isNotEmpty(packagePath)){\n\t\t\t\t\tsubPackagePath = packagePath + \"/\" + subPackagePath;\n\t\t\t\t}\n\t\t\t\tString subPackageName = fileName;\n\t\t\t\tif(StringUtil.isNotEmpty(packageName)){\n\t\t\t\t\tsubPackageName = packageName + \".\" + subPackageName;\n\t\t\t\t}\n\t\t\t\taddClass(classSet, subPackagePath, subPackageName);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void addClass(Set<Class<?>> classSet, String className){\n\t\tClass<?> cls = loadClass(className, false);\n\t\tclassSet.add(cls);\n\t}\n}\n\n ```  \n\n\n\n扫描文件统计代码行数代码如下：\n ```  \n package cn.gukeer.common.utils;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.*;\n\n\n/*\n*   添加所有文件方法addFiles，是否是目录判断方法 isDirectory ,读取行数方法readLinePerFile\n*\n*\n* */\npublic class HowManyLine {\n    List<File> list = new ArrayList<File>();\n    int linenumber = 0;\n\n    FileReader fr = null;\n    BufferedReader br = null;\n\n    /**\n     * @param path，fileSuffixList path:需要统计的路径\n     *                            fileSuffixList:需要统计的文件后缀List\n     */\n    public void counter(String path, List<String> fileSuffixList, String target) {\n        long begin = System.currentTimeMillis();\n        System.out.println(\"\\n开始读取\" + path + \"下的文件,若文件较多，耗时可能较长，请您耐心等待。。。。\\n\");\n        File file = new File(path);\n        File files[] = null;\n        files = file.listFiles();\n        addFile(files);//将目录下所有文件加入到list中\n        isDirectory(files);//所有文件列表进行遍历判断，若是文件夹，继续将该文件夹下的所有文件加入到list中，递归判断\n        Map map = readLinePerFile(fileSuffixList, target);\n        Set keys = map.keySet();\n        for (Object key : keys) {\n            System.out.println(key + \"共：\" + map.get(key) + \"行\");\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"\\n读取完毕，共统计\" + list.size() + \"个文件，耗时\" + (end - begin) + \"毫秒\");\n    }\n\n    // 判断是否是目录 ，递归判断\n    public void isDirectory(File[] files) {\n        for (File s : files) {\n            if (s.isDirectory()) {\n                File file[] = s.listFiles();\n                addFile(file);\n                isDirectory(file);\n                continue;\n            }\n        }\n    }\n\n    //将文件列表添加到list中\n    public void addFile(File file[]) {\n        for (int index = 0; index < file.length; index++) {\n            list.add(file[index]);\n        }\n    }\n\n    //读取非空白行\n    public Map readLinePerFile(List<String> fileSuffixList, String target) {\n        Map map = new TreeMap();\n        try {\n            for (String suffix : fileSuffixList) {\n                int suffixNum = 0;\n                for (File s : list) {\n                    int yuan = linenumber;\n                    if (s.isDirectory()) {\n                        continue;\n                    }\n\n                    if (!suffix.equals(\".*\")){\n                        if (s.getName().lastIndexOf(suffix) <= 0) {\n                            continue;\n                        }\n                    }\n\n                    fr = new FileReader(s);\n                    br = new BufferedReader(fr);\n                    String i = \"\";\n                    int lineNum = 0;\n                    while ((i = br.readLine()) != null) {\n                        lineNum++;\n                        if (!isBlankLine(i)) {\n                            if (StringUtils.isNotEmpty(target))\n                                if (i.contains(target))\n                                    System.out.println(s.getName() + \"的第\" + lineNum + \"行有你需要搜索的字符串\");\n\n                            linenumber++;\n                            suffixNum++;\n\n                        }\n                    }\n                    /*System.out.print(s.getName());\n                    System.out.println(\"\\t\\t有\" + (linenumber - yuan) + \"行\");*/\n                }\n                map.put(suffix, suffixNum);\n            }\n            map.put(\"total\", linenumber);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (br != null) {\n                try {\n                    br.close();\n                } catch (Exception e) {\n                }\n            }\n            if (fr != null) {\n                try {\n                    fr.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return map;\n    }\n\n    //是否是空行,是空行返回true\n    public boolean isBlankLine(String i) {\n        if (i.trim().length() == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //全文索引\n    public static void main(String args[]) {\n        HowManyLine lineCounter = new HowManyLine();\n        List<String> fileSuffixList = new ArrayList<String>();\n        fileSuffixList.add(\".*\");\n       //fileSuffixList.add(\".jsp\");\n        //fileSuffixList.add(\".css\");\n       // fileSuffixList.add(\".js\");\n        //fileSuffixList.add(\".xml\");\n        //fileSuffixList.add(\".*\");\n       // lineCounter.counter(\"D:\\\\javaProjects\\\\git\\\\gkPlatform\", fileSuffixList, \"好不好\");\n        lineCounter.counter(\"D:\\\\blog\\\\zjy\\\\themes\\\\concise2\", fileSuffixList, \"o.com/weiboshow/ind\");\n    }\n}\n \n ```","source":"_posts/fileCount.md","raw":"---\ntitle: java 文件统计功能\ndate: 2017-05-03 13:51:49\ntags: java\n---\n 刚开始项目经理需要==统计项目代码行数==，所以写了这个类用来实现这个需求\n\n## 原理：\n参数  项目路径，需要统计的文件后缀名的集合\n  递归遍历项目路径下的所有文件直到找不到文件为止！\n## 核心方法：\n-   new File(path).listFiles();   获取这个路径下的文件数组  File[] \n-   遍历这个文件数组，如果是文件并且符合后缀名集合，加入到 全局变量 List<File> 里面去。如果是文件夹继续递归判断\n-   最终得到一个符合 所有后缀名，并且在指定路径下的所有文件 集合\n-   最后将这个集合通过文件流读取，来计算行数 FileReader（file）\n  \n  \n## 拓展: \n在使用fileReader的时候，因为读取文件是按行。所以可作为全文索引工具类。\n全局搜索项目里面的字符串。定位哪个文件的哪一行有指定的字符串\n\n## 类似应用：\n\nspring的包扫描原理\n扫描controller包下的所有class文件，并且判断它们是否是 isAnnoationCLass（Controller.class）注解类  递归\n\n仿照spring做的类扫描器代码如下：\n\n ```   \n package org.smart4j.framework.util;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic final class ClassUtil {\n\t\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CastUtil.class);\n\t\n\t/**\n\t * 获取类加载器\n\t */\n\tpublic static ClassLoader getClassLoader(){\n\t\treturn Thread.currentThread().getContextClassLoader();\n\t}\n\t\n\t/**\n\t * 加载类\n\t */\n\tpublic static Class<?> loadClass(String className, boolean isInitialized){\n\t\tClass<?> cls;\n\t\ttry {\n\t\t\tcls = Class.forName(className, isInitialized, getClassLoader());\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"load class fail\", e);\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\treturn cls;\n\t}\n\t\n\t/**\n\t * 加载类\n\t * @param className\n\t * @return\n\t */\n\tpublic static Class<?> loadClass(String className) {\n\t\treturn loadClass(className, true);\n\t}\n\t\n\t/**\n\t * 获取指定包下的所有类\n\t */\n\tpublic static Set<Class<?>> getClassSet(String packageName){\n\t\tSet<Class<?>> classSet = new HashSet<Class<?>>();\n\t\ttry {\n\t\t\tEnumeration<URL> urls = getClassLoader().getResources(packageName.replace(\".\", \"/\"));\n\t\t\twhile(urls.hasMoreElements()){\n\t\t\t\tURL url = urls.nextElement();\n\t\t\t\tif(null != url){\n\t\t\t\t\tString protocol = url.getProtocol();\n\t\t\t\t\tif(\"file\".equals(protocol)){\n\t\t\t\t\t\tString packagePath = url.getPath().replaceAll(\"%20\", \"\");\n\t\t\t\t\t\taddClass(classSet, packagePath, packageName);\n\t\t\t\t\t}else if(\"jar\".equals(protocol)){\n\t\t\t\t\t\tJarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();\n\t\t\t\t\t\tif(null!=jarURLConnection){\n\t\t\t\t\t\t\tJarFile jarFile = jarURLConnection.getJarFile();\n\t\t\t\t\t\t\tif(null!=jarFile){\n\t\t\t\t\t\t\t\tEnumeration<JarEntry> jarEntries = jarFile.entries();\n\t\t\t\t\t\t\t\twhile(jarEntries.hasMoreElements()){\n\t\t\t\t\t\t\t\t\tJarEntry jarEntry = jarEntries.nextElement();\n\t\t\t\t\t\t\t\t\tString jarEntryName = jarEntry.getName();\n\t\t\t\t\t\t\t\t\tif(\".class\".endsWith(jarEntryName)){\n\t\t\t\t\t\t\t\t\t\tString className = jarEntryName.substring(0, jarEntryName.lastIndexOf(\".\")).replaceAll(\"/\", \".\");\n\t\t\t\t\t\t\t\t\taddClass(classSet, className);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"get class set fail\", e);\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\treturn classSet;\n\t}\n\t\n\tprivate static void addClass(Set<Class<?>> classSet, String packagePath, String packageName){\n\t\tFile[] files = new File(packagePath).listFiles(new FileFilter() {\n\n\t\t\t@Override\n\t\t\tpublic boolean accept(File file) {\n\t\t\t\treturn (file.isFile() && file.getName().endsWith(\".class\")) || (\n\t\t\t\t\t\tfile.isDirectory());\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tfor(File file : files){\n\t\t\tString fileName = file.getName();\n\t\t\tif(file.isFile()){\n\t\t\t\tString className = fileName.substring(0, fileName.lastIndexOf(\".\"));\n\t\t\t\tif(StringUtil.isNotEmpty(className)){\n\t\t\t\t\tclassName = packageName + \".\" + className;\n\t\t\t\t}\n\t\t\t\taddClass(classSet, className);\n\t\t\t}else{\n\t\t\t\tString subPackagePath = fileName;\n\t\t\t\tif(StringUtil.isNotEmpty(packagePath)){\n\t\t\t\t\tsubPackagePath = packagePath + \"/\" + subPackagePath;\n\t\t\t\t}\n\t\t\t\tString subPackageName = fileName;\n\t\t\t\tif(StringUtil.isNotEmpty(packageName)){\n\t\t\t\t\tsubPackageName = packageName + \".\" + subPackageName;\n\t\t\t\t}\n\t\t\t\taddClass(classSet, subPackagePath, subPackageName);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static void addClass(Set<Class<?>> classSet, String className){\n\t\tClass<?> cls = loadClass(className, false);\n\t\tclassSet.add(cls);\n\t}\n}\n\n ```  \n\n\n\n扫描文件统计代码行数代码如下：\n ```  \n package cn.gukeer.common.utils;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.*;\n\n\n/*\n*   添加所有文件方法addFiles，是否是目录判断方法 isDirectory ,读取行数方法readLinePerFile\n*\n*\n* */\npublic class HowManyLine {\n    List<File> list = new ArrayList<File>();\n    int linenumber = 0;\n\n    FileReader fr = null;\n    BufferedReader br = null;\n\n    /**\n     * @param path，fileSuffixList path:需要统计的路径\n     *                            fileSuffixList:需要统计的文件后缀List\n     */\n    public void counter(String path, List<String> fileSuffixList, String target) {\n        long begin = System.currentTimeMillis();\n        System.out.println(\"\\n开始读取\" + path + \"下的文件,若文件较多，耗时可能较长，请您耐心等待。。。。\\n\");\n        File file = new File(path);\n        File files[] = null;\n        files = file.listFiles();\n        addFile(files);//将目录下所有文件加入到list中\n        isDirectory(files);//所有文件列表进行遍历判断，若是文件夹，继续将该文件夹下的所有文件加入到list中，递归判断\n        Map map = readLinePerFile(fileSuffixList, target);\n        Set keys = map.keySet();\n        for (Object key : keys) {\n            System.out.println(key + \"共：\" + map.get(key) + \"行\");\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"\\n读取完毕，共统计\" + list.size() + \"个文件，耗时\" + (end - begin) + \"毫秒\");\n    }\n\n    // 判断是否是目录 ，递归判断\n    public void isDirectory(File[] files) {\n        for (File s : files) {\n            if (s.isDirectory()) {\n                File file[] = s.listFiles();\n                addFile(file);\n                isDirectory(file);\n                continue;\n            }\n        }\n    }\n\n    //将文件列表添加到list中\n    public void addFile(File file[]) {\n        for (int index = 0; index < file.length; index++) {\n            list.add(file[index]);\n        }\n    }\n\n    //读取非空白行\n    public Map readLinePerFile(List<String> fileSuffixList, String target) {\n        Map map = new TreeMap();\n        try {\n            for (String suffix : fileSuffixList) {\n                int suffixNum = 0;\n                for (File s : list) {\n                    int yuan = linenumber;\n                    if (s.isDirectory()) {\n                        continue;\n                    }\n\n                    if (!suffix.equals(\".*\")){\n                        if (s.getName().lastIndexOf(suffix) <= 0) {\n                            continue;\n                        }\n                    }\n\n                    fr = new FileReader(s);\n                    br = new BufferedReader(fr);\n                    String i = \"\";\n                    int lineNum = 0;\n                    while ((i = br.readLine()) != null) {\n                        lineNum++;\n                        if (!isBlankLine(i)) {\n                            if (StringUtils.isNotEmpty(target))\n                                if (i.contains(target))\n                                    System.out.println(s.getName() + \"的第\" + lineNum + \"行有你需要搜索的字符串\");\n\n                            linenumber++;\n                            suffixNum++;\n\n                        }\n                    }\n                    /*System.out.print(s.getName());\n                    System.out.println(\"\\t\\t有\" + (linenumber - yuan) + \"行\");*/\n                }\n                map.put(suffix, suffixNum);\n            }\n            map.put(\"total\", linenumber);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (br != null) {\n                try {\n                    br.close();\n                } catch (Exception e) {\n                }\n            }\n            if (fr != null) {\n                try {\n                    fr.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return map;\n    }\n\n    //是否是空行,是空行返回true\n    public boolean isBlankLine(String i) {\n        if (i.trim().length() == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //全文索引\n    public static void main(String args[]) {\n        HowManyLine lineCounter = new HowManyLine();\n        List<String> fileSuffixList = new ArrayList<String>();\n        fileSuffixList.add(\".*\");\n       //fileSuffixList.add(\".jsp\");\n        //fileSuffixList.add(\".css\");\n       // fileSuffixList.add(\".js\");\n        //fileSuffixList.add(\".xml\");\n        //fileSuffixList.add(\".*\");\n       // lineCounter.counter(\"D:\\\\javaProjects\\\\git\\\\gkPlatform\", fileSuffixList, \"好不好\");\n        lineCounter.counter(\"D:\\\\blog\\\\zjy\\\\themes\\\\concise2\", fileSuffixList, \"o.com/weiboshow/ind\");\n    }\n}\n \n ```","slug":"fileCount","published":1,"updated":"2017-05-04T08:35:42.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdl8c0004w0vihqekttnd","content":"<p> 刚开始项目经理需要==统计项目代码行数==，所以写了这个类用来实现这个需求</p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><p>参数  项目路径，需要统计的文件后缀名的集合<br>  递归遍历项目路径下的所有文件直到找不到文件为止！</p>\n<h2 id=\"核心方法：\"><a href=\"#核心方法：\" class=\"headerlink\" title=\"核心方法：\"></a>核心方法：</h2><ul>\n<li>new File(path).listFiles();   获取这个路径下的文件数组  File[] </li>\n<li>遍历这个文件数组，如果是文件并且符合后缀名集合，加入到 全局变量 List<file> 里面去。如果是文件夹继续递归判断</file></li>\n<li>最终得到一个符合 所有后缀名，并且在指定路径下的所有文件 集合</li>\n<li>最后将这个集合通过文件流读取，来计算行数 FileReader（file）</li>\n</ul>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h2><p>在使用fileReader的时候，因为读取文件是按行。所以可作为全文索引工具类。<br>全局搜索项目里面的字符串。定位哪个文件的哪一行有指定的字符串</p>\n<h2 id=\"类似应用：\"><a href=\"#类似应用：\" class=\"headerlink\" title=\"类似应用：\"></a>类似应用：</h2><p>spring的包扫描原理<br>扫描controller包下的所有class文件，并且判断它们是否是 isAnnoationCLass（Controller.class）注解类  递归</p>\n<p>仿照spring做的类扫描器代码如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div></pre></td><td class=\"code\"><pre><div class=\"line\"> package org.smart4j.framework.util;</div><div class=\"line\"></div><div class=\"line\">import org.slf4j.Logger;</div><div class=\"line\">import org.slf4j.LoggerFactory;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileFilter;</div><div class=\"line\">import java.net.JarURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import java.util.Enumeration;</div><div class=\"line\">import java.util.HashSet;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\">import java.util.jar.JarEntry;</div><div class=\"line\">import java.util.jar.JarFile;</div><div class=\"line\"></div><div class=\"line\">public final class ClassUtil &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CastUtil.class);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 获取类加载器</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static ClassLoader getClassLoader()&#123;</div><div class=\"line\">\t\treturn Thread.currentThread().getContextClassLoader();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 加载类</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Class&lt;?&gt; loadClass(String className, boolean isInitialized)&#123;</div><div class=\"line\">\t\tClass&lt;?&gt; cls;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tcls = Class.forName(className, isInitialized, getClassLoader());</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tLOGGER.error(&quot;load class fail&quot;, e);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new RuntimeException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn cls;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 加载类</div><div class=\"line\">\t * @param className</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Class&lt;?&gt; loadClass(String className) &#123;</div><div class=\"line\">\t\treturn loadClass(className, true);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 获取指定包下的所有类</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Set&lt;Class&lt;?&gt;&gt; getClassSet(String packageName)&#123;</div><div class=\"line\">\t\tSet&lt;Class&lt;?&gt;&gt; classSet = new HashSet&lt;Class&lt;?&gt;&gt;();</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tEnumeration&lt;URL&gt; urls = getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;/&quot;));</div><div class=\"line\">\t\t\twhile(urls.hasMoreElements())&#123;</div><div class=\"line\">\t\t\t\tURL url = urls.nextElement();</div><div class=\"line\">\t\t\t\tif(null != url)&#123;</div><div class=\"line\">\t\t\t\t\tString protocol = url.getProtocol();</div><div class=\"line\">\t\t\t\t\tif(&quot;file&quot;.equals(protocol))&#123;</div><div class=\"line\">\t\t\t\t\t\tString packagePath = url.getPath().replaceAll(&quot;%20&quot;, &quot;&quot;);</div><div class=\"line\">\t\t\t\t\t\taddClass(classSet, packagePath, packageName);</div><div class=\"line\">\t\t\t\t\t&#125;else if(&quot;jar&quot;.equals(protocol))&#123;</div><div class=\"line\">\t\t\t\t\t\tJarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t\t\t\tif(null!=jarURLConnection)&#123;</div><div class=\"line\">\t\t\t\t\t\t\tJarFile jarFile = jarURLConnection.getJarFile();</div><div class=\"line\">\t\t\t\t\t\t\tif(null!=jarFile)&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tEnumeration&lt;JarEntry&gt; jarEntries = jarFile.entries();</div><div class=\"line\">\t\t\t\t\t\t\t\twhile(jarEntries.hasMoreElements())&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\t\tJarEntry jarEntry = jarEntries.nextElement();</div><div class=\"line\">\t\t\t\t\t\t\t\t\tString jarEntryName = jarEntry.getName();</div><div class=\"line\">\t\t\t\t\t\t\t\t\tif(&quot;.class&quot;.endsWith(jarEntryName))&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\tString className = jarEntryName.substring(0, jarEntryName.lastIndexOf(&quot;.&quot;)).replaceAll(&quot;/&quot;, &quot;.&quot;);</div><div class=\"line\">\t\t\t\t\t\t\t\t\taddClass(classSet, className);</div><div class=\"line\">\t\t\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tLOGGER.error(&quot;get class set fail&quot;, e);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new RuntimeException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn classSet;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static void addClass(Set&lt;Class&lt;?&gt;&gt; classSet, String packagePath, String packageName)&#123;</div><div class=\"line\">\t\tFile[] files = new File(packagePath).listFiles(new FileFilter() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic boolean accept(File file) &#123;</div><div class=\"line\">\t\t\t\treturn (file.isFile() &amp;&amp; file.getName().endsWith(&quot;.class&quot;)) || (</div><div class=\"line\">\t\t\t\t\t\tfile.isDirectory());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfor(File file : files)&#123;</div><div class=\"line\">\t\t\tString fileName = file.getName();</div><div class=\"line\">\t\t\tif(file.isFile())&#123;</div><div class=\"line\">\t\t\t\tString className = fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;));</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(className))&#123;</div><div class=\"line\">\t\t\t\t\tclassName = packageName + &quot;.&quot; + className;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\taddClass(classSet, className);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tString subPackagePath = fileName;</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(packagePath))&#123;</div><div class=\"line\">\t\t\t\t\tsubPackagePath = packagePath + &quot;/&quot; + subPackagePath;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tString subPackageName = fileName;</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(packageName))&#123;</div><div class=\"line\">\t\t\t\t\tsubPackageName = packageName + &quot;.&quot; + subPackageName;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\taddClass(classSet, subPackagePath, subPackageName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static void addClass(Set&lt;Class&lt;?&gt;&gt; classSet, String className)&#123;</div><div class=\"line\">\t\tClass&lt;?&gt; cls = loadClass(className, false);</div><div class=\"line\">\t\tclassSet.add(cls);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> ```  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">扫描文件统计代码行数代码如下：</div><div class=\"line\"> ```  </div><div class=\"line\"> package cn.gukeer.common.utils;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileReader;</div><div class=\"line\">import java.util.*;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\">*   添加所有文件方法addFiles，是否是目录判断方法 isDirectory ,读取行数方法readLinePerFile</div><div class=\"line\">*</div><div class=\"line\">*</div><div class=\"line\">* */</div><div class=\"line\">public class HowManyLine &#123;</div><div class=\"line\">    List&lt;File&gt; list = new ArrayList&lt;File&gt;();</div><div class=\"line\">    int linenumber = 0;</div><div class=\"line\"></div><div class=\"line\">    FileReader fr = null;</div><div class=\"line\">    BufferedReader br = null;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param path，fileSuffixList path:需要统计的路径</div><div class=\"line\">     *                            fileSuffixList:需要统计的文件后缀List</div><div class=\"line\">     */</div><div class=\"line\">    public void counter(String path, List&lt;String&gt; fileSuffixList, String target) &#123;</div><div class=\"line\">        long begin = System.currentTimeMillis();</div><div class=\"line\">        System.out.println(&quot;\\n开始读取&quot; + path + &quot;下的文件,若文件较多，耗时可能较长，请您耐心等待。。。。\\n&quot;);</div><div class=\"line\">        File file = new File(path);</div><div class=\"line\">        File files[] = null;</div><div class=\"line\">        files = file.listFiles();</div><div class=\"line\">        addFile(files);//将目录下所有文件加入到list中</div><div class=\"line\">        isDirectory(files);//所有文件列表进行遍历判断，若是文件夹，继续将该文件夹下的所有文件加入到list中，递归判断</div><div class=\"line\">        Map map = readLinePerFile(fileSuffixList, target);</div><div class=\"line\">        Set keys = map.keySet();</div><div class=\"line\">        for (Object key : keys) &#123;</div><div class=\"line\">            System.out.println(key + &quot;共：&quot; + map.get(key) + &quot;行&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        long end = System.currentTimeMillis();</div><div class=\"line\">        System.out.println(&quot;\\n读取完毕，共统计&quot; + list.size() + &quot;个文件，耗时&quot; + (end - begin) + &quot;毫秒&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 判断是否是目录 ，递归判断</div><div class=\"line\">    public void isDirectory(File[] files) &#123;</div><div class=\"line\">        for (File s : files) &#123;</div><div class=\"line\">            if (s.isDirectory()) &#123;</div><div class=\"line\">                File file[] = s.listFiles();</div><div class=\"line\">                addFile(file);</div><div class=\"line\">                isDirectory(file);</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //将文件列表添加到list中</div><div class=\"line\">    public void addFile(File file[]) &#123;</div><div class=\"line\">        for (int index = 0; index &lt; file.length; index++) &#123;</div><div class=\"line\">            list.add(file[index]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取非空白行</div><div class=\"line\">    public Map readLinePerFile(List&lt;String&gt; fileSuffixList, String target) &#123;</div><div class=\"line\">        Map map = new TreeMap();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (String suffix : fileSuffixList) &#123;</div><div class=\"line\">                int suffixNum = 0;</div><div class=\"line\">                for (File s : list) &#123;</div><div class=\"line\">                    int yuan = linenumber;</div><div class=\"line\">                    if (s.isDirectory()) &#123;</div><div class=\"line\">                        continue;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    if (!suffix.equals(&quot;.*&quot;))&#123;</div><div class=\"line\">                        if (s.getName().lastIndexOf(suffix) &lt;= 0) &#123;</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    fr = new FileReader(s);</div><div class=\"line\">                    br = new BufferedReader(fr);</div><div class=\"line\">                    String i = &quot;&quot;;</div><div class=\"line\">                    int lineNum = 0;</div><div class=\"line\">                    while ((i = br.readLine()) != null) &#123;</div><div class=\"line\">                        lineNum++;</div><div class=\"line\">                        if (!isBlankLine(i)) &#123;</div><div class=\"line\">                            if (StringUtils.isNotEmpty(target))</div><div class=\"line\">                                if (i.contains(target))</div><div class=\"line\">                                    System.out.println(s.getName() + &quot;的第&quot; + lineNum + &quot;行有你需要搜索的字符串&quot;);</div><div class=\"line\"></div><div class=\"line\">                            linenumber++;</div><div class=\"line\">                            suffixNum++;</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    /*System.out.print(s.getName());</div><div class=\"line\">                    System.out.println(&quot;\\t\\t有&quot; + (linenumber - yuan) + &quot;行&quot;);*/</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(suffix, suffixNum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            map.put(&quot;total&quot;, linenumber);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (br != null) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (fr != null) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    fr.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //是否是空行,是空行返回true</div><div class=\"line\">    public boolean isBlankLine(String i) &#123;</div><div class=\"line\">        if (i.trim().length() == 0) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //全文索引</div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        HowManyLine lineCounter = new HowManyLine();</div><div class=\"line\">        List&lt;String&gt; fileSuffixList = new ArrayList&lt;String&gt;();</div><div class=\"line\">        fileSuffixList.add(&quot;.*&quot;);</div><div class=\"line\">       //fileSuffixList.add(&quot;.jsp&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.css&quot;);</div><div class=\"line\">       // fileSuffixList.add(&quot;.js&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.xml&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.*&quot;);</div><div class=\"line\">       // lineCounter.counter(&quot;D:\\\\javaProjects\\\\git\\\\gkPlatform&quot;, fileSuffixList, &quot;好不好&quot;);</div><div class=\"line\">        lineCounter.counter(&quot;D:\\\\blog\\\\zjy\\\\themes\\\\concise2&quot;, fileSuffixList, &quot;o.com/weiboshow/ind&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p> 刚开始项目经理需要==统计项目代码行数==，所以写了这个类用来实现这个需求</p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><p>参数  项目路径，需要统计的文件后缀名的集合<br>  递归遍历项目路径下的所有文件直到找不到文件为止！</p>\n<h2 id=\"核心方法：\"><a href=\"#核心方法：\" class=\"headerlink\" title=\"核心方法：\"></a>核心方法：</h2><ul>\n<li>new File(path).listFiles();   获取这个路径下的文件数组  File[] </li>\n<li>遍历这个文件数组，如果是文件并且符合后缀名集合，加入到 全局变量 List<File> 里面去。如果是文件夹继续递归判断</File></li>\n<li>最终得到一个符合 所有后缀名，并且在指定路径下的所有文件 集合</li>\n<li>最后将这个集合通过文件流读取，来计算行数 FileReader（file）</li>\n</ul>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h2><p>在使用fileReader的时候，因为读取文件是按行。所以可作为全文索引工具类。<br>全局搜索项目里面的字符串。定位哪个文件的哪一行有指定的字符串</p>\n<h2 id=\"类似应用：\"><a href=\"#类似应用：\" class=\"headerlink\" title=\"类似应用：\"></a>类似应用：</h2><p>spring的包扫描原理<br>扫描controller包下的所有class文件，并且判断它们是否是 isAnnoationCLass（Controller.class）注解类  递归</p>\n<p>仿照spring做的类扫描器代码如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div></pre></td><td class=\"code\"><pre><div class=\"line\"> package org.smart4j.framework.util;</div><div class=\"line\"></div><div class=\"line\">import org.slf4j.Logger;</div><div class=\"line\">import org.slf4j.LoggerFactory;</div><div class=\"line\"></div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileFilter;</div><div class=\"line\">import java.net.JarURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import java.util.Enumeration;</div><div class=\"line\">import java.util.HashSet;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\">import java.util.jar.JarEntry;</div><div class=\"line\">import java.util.jar.JarFile;</div><div class=\"line\"></div><div class=\"line\">public final class ClassUtil &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CastUtil.class);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 获取类加载器</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static ClassLoader getClassLoader()&#123;</div><div class=\"line\">\t\treturn Thread.currentThread().getContextClassLoader();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 加载类</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Class&lt;?&gt; loadClass(String className, boolean isInitialized)&#123;</div><div class=\"line\">\t\tClass&lt;?&gt; cls;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tcls = Class.forName(className, isInitialized, getClassLoader());</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tLOGGER.error(&quot;load class fail&quot;, e);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new RuntimeException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn cls;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 加载类</div><div class=\"line\">\t * @param className</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Class&lt;?&gt; loadClass(String className) &#123;</div><div class=\"line\">\t\treturn loadClass(className, true);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 获取指定包下的所有类</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static Set&lt;Class&lt;?&gt;&gt; getClassSet(String packageName)&#123;</div><div class=\"line\">\t\tSet&lt;Class&lt;?&gt;&gt; classSet = new HashSet&lt;Class&lt;?&gt;&gt;();</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tEnumeration&lt;URL&gt; urls = getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;/&quot;));</div><div class=\"line\">\t\t\twhile(urls.hasMoreElements())&#123;</div><div class=\"line\">\t\t\t\tURL url = urls.nextElement();</div><div class=\"line\">\t\t\t\tif(null != url)&#123;</div><div class=\"line\">\t\t\t\t\tString protocol = url.getProtocol();</div><div class=\"line\">\t\t\t\t\tif(&quot;file&quot;.equals(protocol))&#123;</div><div class=\"line\">\t\t\t\t\t\tString packagePath = url.getPath().replaceAll(&quot;%20&quot;, &quot;&quot;);</div><div class=\"line\">\t\t\t\t\t\taddClass(classSet, packagePath, packageName);</div><div class=\"line\">\t\t\t\t\t&#125;else if(&quot;jar&quot;.equals(protocol))&#123;</div><div class=\"line\">\t\t\t\t\t\tJarURLConnection jarURLConnection = (JarURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t\t\t\tif(null!=jarURLConnection)&#123;</div><div class=\"line\">\t\t\t\t\t\t\tJarFile jarFile = jarURLConnection.getJarFile();</div><div class=\"line\">\t\t\t\t\t\t\tif(null!=jarFile)&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\tEnumeration&lt;JarEntry&gt; jarEntries = jarFile.entries();</div><div class=\"line\">\t\t\t\t\t\t\t\twhile(jarEntries.hasMoreElements())&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\t\tJarEntry jarEntry = jarEntries.nextElement();</div><div class=\"line\">\t\t\t\t\t\t\t\t\tString jarEntryName = jarEntry.getName();</div><div class=\"line\">\t\t\t\t\t\t\t\t\tif(&quot;.class&quot;.endsWith(jarEntryName))&#123;</div><div class=\"line\">\t\t\t\t\t\t\t\t\t\tString className = jarEntryName.substring(0, jarEntryName.lastIndexOf(&quot;.&quot;)).replaceAll(&quot;/&quot;, &quot;.&quot;);</div><div class=\"line\">\t\t\t\t\t\t\t\t\taddClass(classSet, className);</div><div class=\"line\">\t\t\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tLOGGER.error(&quot;get class set fail&quot;, e);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new RuntimeException();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn classSet;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static void addClass(Set&lt;Class&lt;?&gt;&gt; classSet, String packagePath, String packageName)&#123;</div><div class=\"line\">\t\tFile[] files = new File(packagePath).listFiles(new FileFilter() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic boolean accept(File file) &#123;</div><div class=\"line\">\t\t\t\treturn (file.isFile() &amp;&amp; file.getName().endsWith(&quot;.class&quot;)) || (</div><div class=\"line\">\t\t\t\t\t\tfile.isDirectory());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfor(File file : files)&#123;</div><div class=\"line\">\t\t\tString fileName = file.getName();</div><div class=\"line\">\t\t\tif(file.isFile())&#123;</div><div class=\"line\">\t\t\t\tString className = fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;));</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(className))&#123;</div><div class=\"line\">\t\t\t\t\tclassName = packageName + &quot;.&quot; + className;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\taddClass(classSet, className);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\tString subPackagePath = fileName;</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(packagePath))&#123;</div><div class=\"line\">\t\t\t\t\tsubPackagePath = packagePath + &quot;/&quot; + subPackagePath;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tString subPackageName = fileName;</div><div class=\"line\">\t\t\t\tif(StringUtil.isNotEmpty(packageName))&#123;</div><div class=\"line\">\t\t\t\t\tsubPackageName = packageName + &quot;.&quot; + subPackageName;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\taddClass(classSet, subPackagePath, subPackageName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static void addClass(Set&lt;Class&lt;?&gt;&gt; classSet, String className)&#123;</div><div class=\"line\">\t\tClass&lt;?&gt; cls = loadClass(className, false);</div><div class=\"line\">\t\tclassSet.add(cls);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> ```  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">扫描文件统计代码行数代码如下：</div><div class=\"line\"> ```  </div><div class=\"line\"> package cn.gukeer.common.utils;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileReader;</div><div class=\"line\">import java.util.*;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\">*   添加所有文件方法addFiles，是否是目录判断方法 isDirectory ,读取行数方法readLinePerFile</div><div class=\"line\">*</div><div class=\"line\">*</div><div class=\"line\">* */</div><div class=\"line\">public class HowManyLine &#123;</div><div class=\"line\">    List&lt;File&gt; list = new ArrayList&lt;File&gt;();</div><div class=\"line\">    int linenumber = 0;</div><div class=\"line\"></div><div class=\"line\">    FileReader fr = null;</div><div class=\"line\">    BufferedReader br = null;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param path，fileSuffixList path:需要统计的路径</div><div class=\"line\">     *                            fileSuffixList:需要统计的文件后缀List</div><div class=\"line\">     */</div><div class=\"line\">    public void counter(String path, List&lt;String&gt; fileSuffixList, String target) &#123;</div><div class=\"line\">        long begin = System.currentTimeMillis();</div><div class=\"line\">        System.out.println(&quot;\\n开始读取&quot; + path + &quot;下的文件,若文件较多，耗时可能较长，请您耐心等待。。。。\\n&quot;);</div><div class=\"line\">        File file = new File(path);</div><div class=\"line\">        File files[] = null;</div><div class=\"line\">        files = file.listFiles();</div><div class=\"line\">        addFile(files);//将目录下所有文件加入到list中</div><div class=\"line\">        isDirectory(files);//所有文件列表进行遍历判断，若是文件夹，继续将该文件夹下的所有文件加入到list中，递归判断</div><div class=\"line\">        Map map = readLinePerFile(fileSuffixList, target);</div><div class=\"line\">        Set keys = map.keySet();</div><div class=\"line\">        for (Object key : keys) &#123;</div><div class=\"line\">            System.out.println(key + &quot;共：&quot; + map.get(key) + &quot;行&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        long end = System.currentTimeMillis();</div><div class=\"line\">        System.out.println(&quot;\\n读取完毕，共统计&quot; + list.size() + &quot;个文件，耗时&quot; + (end - begin) + &quot;毫秒&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 判断是否是目录 ，递归判断</div><div class=\"line\">    public void isDirectory(File[] files) &#123;</div><div class=\"line\">        for (File s : files) &#123;</div><div class=\"line\">            if (s.isDirectory()) &#123;</div><div class=\"line\">                File file[] = s.listFiles();</div><div class=\"line\">                addFile(file);</div><div class=\"line\">                isDirectory(file);</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //将文件列表添加到list中</div><div class=\"line\">    public void addFile(File file[]) &#123;</div><div class=\"line\">        for (int index = 0; index &lt; file.length; index++) &#123;</div><div class=\"line\">            list.add(file[index]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //读取非空白行</div><div class=\"line\">    public Map readLinePerFile(List&lt;String&gt; fileSuffixList, String target) &#123;</div><div class=\"line\">        Map map = new TreeMap();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (String suffix : fileSuffixList) &#123;</div><div class=\"line\">                int suffixNum = 0;</div><div class=\"line\">                for (File s : list) &#123;</div><div class=\"line\">                    int yuan = linenumber;</div><div class=\"line\">                    if (s.isDirectory()) &#123;</div><div class=\"line\">                        continue;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    if (!suffix.equals(&quot;.*&quot;))&#123;</div><div class=\"line\">                        if (s.getName().lastIndexOf(suffix) &lt;= 0) &#123;</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    fr = new FileReader(s);</div><div class=\"line\">                    br = new BufferedReader(fr);</div><div class=\"line\">                    String i = &quot;&quot;;</div><div class=\"line\">                    int lineNum = 0;</div><div class=\"line\">                    while ((i = br.readLine()) != null) &#123;</div><div class=\"line\">                        lineNum++;</div><div class=\"line\">                        if (!isBlankLine(i)) &#123;</div><div class=\"line\">                            if (StringUtils.isNotEmpty(target))</div><div class=\"line\">                                if (i.contains(target))</div><div class=\"line\">                                    System.out.println(s.getName() + &quot;的第&quot; + lineNum + &quot;行有你需要搜索的字符串&quot;);</div><div class=\"line\"></div><div class=\"line\">                            linenumber++;</div><div class=\"line\">                            suffixNum++;</div><div class=\"line\"></div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    /*System.out.print(s.getName());</div><div class=\"line\">                    System.out.println(&quot;\\t\\t有&quot; + (linenumber - yuan) + &quot;行&quot;);*/</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(suffix, suffixNum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            map.put(&quot;total&quot;, linenumber);</div><div class=\"line\"></div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (br != null) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (fr != null) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    fr.close();</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //是否是空行,是空行返回true</div><div class=\"line\">    public boolean isBlankLine(String i) &#123;</div><div class=\"line\">        if (i.trim().length() == 0) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //全文索引</div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        HowManyLine lineCounter = new HowManyLine();</div><div class=\"line\">        List&lt;String&gt; fileSuffixList = new ArrayList&lt;String&gt;();</div><div class=\"line\">        fileSuffixList.add(&quot;.*&quot;);</div><div class=\"line\">       //fileSuffixList.add(&quot;.jsp&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.css&quot;);</div><div class=\"line\">       // fileSuffixList.add(&quot;.js&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.xml&quot;);</div><div class=\"line\">        //fileSuffixList.add(&quot;.*&quot;);</div><div class=\"line\">       // lineCounter.counter(&quot;D:\\\\javaProjects\\\\git\\\\gkPlatform&quot;, fileSuffixList, &quot;好不好&quot;);</div><div class=\"line\">        lineCounter.counter(&quot;D:\\\\blog\\\\zjy\\\\themes\\\\concise2&quot;, fileSuffixList, &quot;o.com/weiboshow/ind&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Nginx 安装 -ubuntu","date":"2016-05-03T05:51:49.000Z","_content":"\n## 1、Nginx简介\nNginx是一个非常轻量级的HTTP服务器，发音为“engine X”，是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。说到Web服务器，Apache服务器和IIS服务器是两大巨头；但是运行速度更快、更灵活的Nginx 正在迎头赶上。\n\n![logo](nginx/1.png)\n\n## Nginx核心特点：\n1. 跨平台：Nginx 可以在大多数 Unix like\n2.  OS编译运行，而且也有Windows的移植版本；    \n    配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置；\n3. 非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx##### 使用了最新的epoll模型）；\n4. 事件驱动：通信机制采用epoll模型，支持更大的并发连接；\n5. Master/Worker结构：一个master进程，生成一个或多个worker进程；\n\n##### 正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\n\n##### 反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容 原本就是它自己的一样。\n\n##### 反向代理的最大的好处在于：负载均衡\n![logo](nginx/2.png)\n\n\n## 2、Nginx的在线安装\n ```\n sudo apt-get install nginx\n```\n![logo](nginx/3.png)\n==ubuntu安装Nginx之后的文件结构大致为：\n所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下\n启动程序文件在/usr/sbin/nginx\n日志放在了/var/log/nginx中，分别是access.log和error.log\n并已经在/etc/init.d/下创建了启动脚本nginx\n 默认的虚拟主机的目录设置在了/usr/share/nginx/html==\n![logo](nginx/4.png)\n\n其html源文件是：\n\n![logo](nginx/5.png)\n\n## 3、Nginx的在线启动\n```\nsudo /etc/init.d/nginx start\n```\n如果你的机器同时安装了Apache，那上面的访问方式就不能使用了，而且nginx都可能启动不了，这是因为它们都是用了80这个端口。我们这里将nginx的端口修改为8080，修改nginx的配置文件nginx.conf，将一下这一行listen 80;修改为 listen 8080;然后就可以访问了，http://localhost:8080/ 。\n\n![logo](nginx/6.png)\n\n## 4、Nginx的配置\nNginx的配置文件是/etc/nginx/nginx.conf，其中设置了一些必要的参数，我们发现其中这样的语句：\n include /etc/nginx/sites-enabled/*\n可以看出/etc/nginx/sites-enabled/default文件也是一个核心的配置文件，其中包含了主要的配置信息，如服务器跟目录、服务器名称、location信息和server信息，其实最主要的配置文件就是default。\n\n## 5、用webbench对Nginx进行压测\nsudo ./webbench -c 100 http://localhost\n\n![logo](nginx/7.png)\n\n\ndemo 配置\n\n\n---\nserver {\n  listen 80;\n\n  server_name ynopen.wulianedu.cc;   # 请修改为你的域名\n\n  server_tokens off;     \n\n  \n  access_log  /var/log/nginx/nginx_access.log;\n  error_log   /var/log/nginx/nginx_error.log;\n\n  location / {\n    \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000; \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://127.0.0.1/open/;\n  }\n\n  location /open/ { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000; \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://119.23.62.150:10004/open/;\n  }\n}\n\n\nserver {\n  listen 80;\n\n  server_name ynplatform.wulianedu.cc;   # 请修改为你的域名\n\n  server_tokens off; \n  access_log  /var/log/nginx/nginx_access.log;\n  error_log   /var/log/nginx/nginx_error.log;\n\n  location / { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000;  \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://127.0.0.1/platform/;\n  }\n\n  location /platform/ { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000;  \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://119.23.62.150:10001/platform/;\n  }\n}\n\n\n---\n","source":"_posts/nginx.md","raw":"---\ntitle: Nginx 安装 -ubuntu\ndate: 2016-05-03 13:51:49\ntags: server,linux,ubuntu\n---\n\n## 1、Nginx简介\nNginx是一个非常轻量级的HTTP服务器，发音为“engine X”，是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。说到Web服务器，Apache服务器和IIS服务器是两大巨头；但是运行速度更快、更灵活的Nginx 正在迎头赶上。\n\n![logo](nginx/1.png)\n\n## Nginx核心特点：\n1. 跨平台：Nginx 可以在大多数 Unix like\n2.  OS编译运行，而且也有Windows的移植版本；    \n    配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置；\n3. 非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx##### 使用了最新的epoll模型）；\n4. 事件驱动：通信机制采用epoll模型，支持更大的并发连接；\n5. Master/Worker结构：一个master进程，生成一个或多个worker进程；\n\n##### 正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\n\n##### 反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容 原本就是它自己的一样。\n\n##### 反向代理的最大的好处在于：负载均衡\n![logo](nginx/2.png)\n\n\n## 2、Nginx的在线安装\n ```\n sudo apt-get install nginx\n```\n![logo](nginx/3.png)\n==ubuntu安装Nginx之后的文件结构大致为：\n所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下\n启动程序文件在/usr/sbin/nginx\n日志放在了/var/log/nginx中，分别是access.log和error.log\n并已经在/etc/init.d/下创建了启动脚本nginx\n 默认的虚拟主机的目录设置在了/usr/share/nginx/html==\n![logo](nginx/4.png)\n\n其html源文件是：\n\n![logo](nginx/5.png)\n\n## 3、Nginx的在线启动\n```\nsudo /etc/init.d/nginx start\n```\n如果你的机器同时安装了Apache，那上面的访问方式就不能使用了，而且nginx都可能启动不了，这是因为它们都是用了80这个端口。我们这里将nginx的端口修改为8080，修改nginx的配置文件nginx.conf，将一下这一行listen 80;修改为 listen 8080;然后就可以访问了，http://localhost:8080/ 。\n\n![logo](nginx/6.png)\n\n## 4、Nginx的配置\nNginx的配置文件是/etc/nginx/nginx.conf，其中设置了一些必要的参数，我们发现其中这样的语句：\n include /etc/nginx/sites-enabled/*\n可以看出/etc/nginx/sites-enabled/default文件也是一个核心的配置文件，其中包含了主要的配置信息，如服务器跟目录、服务器名称、location信息和server信息，其实最主要的配置文件就是default。\n\n## 5、用webbench对Nginx进行压测\nsudo ./webbench -c 100 http://localhost\n\n![logo](nginx/7.png)\n\n\ndemo 配置\n\n\n---\nserver {\n  listen 80;\n\n  server_name ynopen.wulianedu.cc;   # 请修改为你的域名\n\n  server_tokens off;     \n\n  \n  access_log  /var/log/nginx/nginx_access.log;\n  error_log   /var/log/nginx/nginx_error.log;\n\n  location / {\n    \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000; \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://127.0.0.1/open/;\n  }\n\n  location /open/ { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000; \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://119.23.62.150:10004/open/;\n  }\n}\n\n\nserver {\n  listen 80;\n\n  server_name ynplatform.wulianedu.cc;   # 请修改为你的域名\n\n  server_tokens off; \n  access_log  /var/log/nginx/nginx_access.log;\n  error_log   /var/log/nginx/nginx_error.log;\n\n  location / { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000;  \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://127.0.0.1/platform/;\n  }\n\n  location /platform/ { \n    proxy_read_timeout 300000;  \n    proxy_connect_timeout 300000;  \n    proxy_redirect     off;\n\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Frame-Options   SAMEORIGIN;\n\n    proxy_pass http://119.23.62.150:10001/platform/;\n  }\n}\n\n\n---\n","slug":"nginx","published":1,"updated":"2017-05-04T08:38:53.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdl8n0005w0viwnfl0wi4","content":"<h2 id=\"1、Nginx简介\"><a href=\"#1、Nginx简介\" class=\"headerlink\" title=\"1、Nginx简介\"></a>1、Nginx简介</h2><p>Nginx是一个非常轻量级的HTTP服务器，发音为“engine X”，是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。说到Web服务器，Apache服务器和IIS服务器是两大巨头；但是运行速度更快、更灵活的Nginx 正在迎头赶上。</p>\n<p><img src=\"/2016/05/03/nginx/1.png\" alt=\"logo\"></p>\n<h2 id=\"Nginx核心特点：\"><a href=\"#Nginx核心特点：\" class=\"headerlink\" title=\"Nginx核心特点：\"></a>Nginx核心特点：</h2><ol>\n<li>跨平台：Nginx 可以在大多数 Unix like</li>\n<li>OS编译运行，而且也有Windows的移植版本；<br>配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置；</li>\n<li>非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx##### 使用了最新的epoll模型）；</li>\n<li>事件驱动：通信机制采用epoll模型，支持更大的并发连接；</li>\n<li>Master/Worker结构：一个master进程，生成一个或多个worker进程；</li>\n</ol>\n<h5 id=\"正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\"><a href=\"#正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\" class=\"headerlink\" title=\"正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\"></a>正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。</h5><h5 id=\"反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问-http-www-baidu-com-readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来-然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容-原本就是它自己的一样。\"><a href=\"#反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问-http-www-baidu-com-readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来-然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容-原本就是它自己的一样。\" class=\"headerlink\" title=\"反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容 原本就是它自己的一样。\"></a>反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 <a href=\"http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容\" target=\"_blank\" rel=\"external\">http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容</a> 原本就是它自己的一样。</h5><h5 id=\"反向代理的最大的好处在于：负载均衡\"><a href=\"#反向代理的最大的好处在于：负载均衡\" class=\"headerlink\" title=\"反向代理的最大的好处在于：负载均衡\"></a>反向代理的最大的好处在于：负载均衡</h5><p><img src=\"/2016/05/03/nginx/2.png\" alt=\"logo\"></p>\n<h2 id=\"2、Nginx的在线安装\"><a href=\"#2、Nginx的在线安装\" class=\"headerlink\" title=\"2、Nginx的在线安装\"></a>2、Nginx的在线安装</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure>\n<p><img src=\"/2016/05/03/nginx/3.png\" alt=\"logo\"><br>==ubuntu安装Nginx之后的文件结构大致为：<br>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下<br>启动程序文件在/usr/sbin/nginx<br>日志放在了/var/log/nginx中，分别是access.log和error.log<br>并已经在/etc/init.d/下创建了启动脚本nginx<br> 默认的虚拟主机的目录设置在了/usr/share/nginx/html==<br><img src=\"/2016/05/03/nginx/4.png\" alt=\"logo\"></p>\n<p>其html源文件是：</p>\n<p><img src=\"/2016/05/03/nginx/5.png\" alt=\"logo\"></p>\n<h2 id=\"3、Nginx的在线启动\"><a href=\"#3、Nginx的在线启动\" class=\"headerlink\" title=\"3、Nginx的在线启动\"></a>3、Nginx的在线启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>\n<p>如果你的机器同时安装了Apache，那上面的访问方式就不能使用了，而且nginx都可能启动不了，这是因为它们都是用了80这个端口。我们这里将nginx的端口修改为8080，修改nginx的配置文件nginx.conf，将一下这一行listen 80;修改为 listen 8080;然后就可以访问了，<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a> 。</p>\n<p><img src=\"/2016/05/03/nginx/6.png\" alt=\"logo\"></p>\n<h2 id=\"4、Nginx的配置\"><a href=\"#4、Nginx的配置\" class=\"headerlink\" title=\"4、Nginx的配置\"></a>4、Nginx的配置</h2><p>Nginx的配置文件是/etc/nginx/nginx.conf，其中设置了一些必要的参数，我们发现其中这样的语句：<br> include /etc/nginx/sites-enabled/*<br>可以看出/etc/nginx/sites-enabled/default文件也是一个核心的配置文件，其中包含了主要的配置信息，如服务器跟目录、服务器名称、location信息和server信息，其实最主要的配置文件就是default。</p>\n<h2 id=\"5、用webbench对Nginx进行压测\"><a href=\"#5、用webbench对Nginx进行压测\" class=\"headerlink\" title=\"5、用webbench对Nginx进行压测\"></a>5、用webbench对Nginx进行压测</h2><p>sudo ./webbench -c 100 <a href=\"http://localhost\" target=\"_blank\" rel=\"external\">http://localhost</a></p>\n<p><img src=\"/2016/05/03/nginx/7.png\" alt=\"logo\"></p>\n<p>demo 配置</p>\n<hr>\n<p>server {<br>  listen 80;</p>\n<p>  server_name ynopen.wulianedu.cc;   # 请修改为你的域名</p>\n<p>  server_tokens off;     </p>\n<p>  access_log  /var/log/nginx/nginx_access.log;<br>  error_log   /var/log/nginx/nginx_error.log;</p>\n<p>  location / {</p>\n<pre><code>proxy_read_timeout 300000;  \nproxy_connect_timeout 300000; \nproxy_redirect     off;\n\nproxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://127.0.0.1/open/;\n</code></pre><p>  }</p>\n<p>  location /open/ {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://119.23.62.150:10004/open/;\n</code></pre><p>  }<br>}</p>\n<p>server {<br>  listen 80;</p>\n<p>  server_name ynplatform.wulianedu.cc;   # 请修改为你的域名</p>\n<p>  server_tokens off;<br>  access_log  /var/log/nginx/nginx_access.log;<br>  error_log   /var/log/nginx/nginx_error.log;</p>\n<p>  location / {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://127.0.0.1/platform/;\n</code></pre><p>  }</p>\n<p>  location /platform/ {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://119.23.62.150:10001/platform/;\n</code></pre><p>  }<br>}</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、Nginx简介\"><a href=\"#1、Nginx简介\" class=\"headerlink\" title=\"1、Nginx简介\"></a>1、Nginx简介</h2><p>Nginx是一个非常轻量级的HTTP服务器，发音为“engine X”，是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。说到Web服务器，Apache服务器和IIS服务器是两大巨头；但是运行速度更快、更灵活的Nginx 正在迎头赶上。</p>\n<p><img src=\"/2016/05/03/nginx/1.png\" alt=\"logo\"></p>\n<h2 id=\"Nginx核心特点：\"><a href=\"#Nginx核心特点：\" class=\"headerlink\" title=\"Nginx核心特点：\"></a>Nginx核心特点：</h2><ol>\n<li>跨平台：Nginx 可以在大多数 Unix like</li>\n<li>OS编译运行，而且也有Windows的移植版本；<br>配置异常简单：非常容易上手。配置风格跟程序开发一样，神一般的配置；</li>\n<li>非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx##### 使用了最新的epoll模型）；</li>\n<li>事件驱动：通信机制采用epoll模型，支持更大的并发连接；</li>\n<li>Master/Worker结构：一个master进程，生成一个或多个worker进程；</li>\n</ol>\n<h5 id=\"正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\"><a href=\"#正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\" class=\"headerlink\" title=\"正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。\"></a>正向代理，工作原理就像一个跳板，用户访问不了某网站，但能通过一个代理服务器访问我不能访问的网站。</h5><h5 id=\"反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问-http-www-baidu-com-readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来-然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容-原本就是它自己的一样。\"><a href=\"#反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问-http-www-baidu-com-readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来-然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容-原本就是它自己的一样。\" class=\"headerlink\" title=\"反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容 原本就是它自己的一样。\"></a>反向代理：以代理服务器接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。例用户访问 <a href=\"http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容\">http://www.baidu.com/readme，但服务器上并不存在readme页面，他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户但用户并不知情，对于客户端而言它就像是原始服务器，就像这些内容</a> 原本就是它自己的一样。</h5><h5 id=\"反向代理的最大的好处在于：负载均衡\"><a href=\"#反向代理的最大的好处在于：负载均衡\" class=\"headerlink\" title=\"反向代理的最大的好处在于：负载均衡\"></a>反向代理的最大的好处在于：负载均衡</h5><p><img src=\"/2016/05/03/nginx/2.png\" alt=\"logo\"></p>\n<h2 id=\"2、Nginx的在线安装\"><a href=\"#2、Nginx的在线安装\" class=\"headerlink\" title=\"2、Nginx的在线安装\"></a>2、Nginx的在线安装</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure>\n<p><img src=\"/2016/05/03/nginx/3.png\" alt=\"logo\"><br>==ubuntu安装Nginx之后的文件结构大致为：<br>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下<br>启动程序文件在/usr/sbin/nginx<br>日志放在了/var/log/nginx中，分别是access.log和error.log<br>并已经在/etc/init.d/下创建了启动脚本nginx<br> 默认的虚拟主机的目录设置在了/usr/share/nginx/html==<br><img src=\"/2016/05/03/nginx/4.png\" alt=\"logo\"></p>\n<p>其html源文件是：</p>\n<p><img src=\"/2016/05/03/nginx/5.png\" alt=\"logo\"></p>\n<h2 id=\"3、Nginx的在线启动\"><a href=\"#3、Nginx的在线启动\" class=\"headerlink\" title=\"3、Nginx的在线启动\"></a>3、Nginx的在线启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>\n<p>如果你的机器同时安装了Apache，那上面的访问方式就不能使用了，而且nginx都可能启动不了，这是因为它们都是用了80这个端口。我们这里将nginx的端口修改为8080，修改nginx的配置文件nginx.conf，将一下这一行listen 80;修改为 listen 8080;然后就可以访问了，<a href=\"http://localhost:8080/\">http://localhost:8080/</a> 。</p>\n<p><img src=\"/2016/05/03/nginx/6.png\" alt=\"logo\"></p>\n<h2 id=\"4、Nginx的配置\"><a href=\"#4、Nginx的配置\" class=\"headerlink\" title=\"4、Nginx的配置\"></a>4、Nginx的配置</h2><p>Nginx的配置文件是/etc/nginx/nginx.conf，其中设置了一些必要的参数，我们发现其中这样的语句：<br> include /etc/nginx/sites-enabled/*<br>可以看出/etc/nginx/sites-enabled/default文件也是一个核心的配置文件，其中包含了主要的配置信息，如服务器跟目录、服务器名称、location信息和server信息，其实最主要的配置文件就是default。</p>\n<h2 id=\"5、用webbench对Nginx进行压测\"><a href=\"#5、用webbench对Nginx进行压测\" class=\"headerlink\" title=\"5、用webbench对Nginx进行压测\"></a>5、用webbench对Nginx进行压测</h2><p>sudo ./webbench -c 100 <a href=\"http://localhost\">http://localhost</a></p>\n<p><img src=\"/2016/05/03/nginx/7.png\" alt=\"logo\"></p>\n<p>demo 配置</p>\n<hr>\n<p>server {<br>  listen 80;</p>\n<p>  server_name ynopen.wulianedu.cc;   # 请修改为你的域名</p>\n<p>  server_tokens off;     </p>\n<p>  access_log  /var/log/nginx/nginx_access.log;<br>  error_log   /var/log/nginx/nginx_error.log;</p>\n<p>  location / {</p>\n<pre><code>proxy_read_timeout 300000;  \nproxy_connect_timeout 300000; \nproxy_redirect     off;\n\nproxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://127.0.0.1/open/;\n</code></pre><p>  }</p>\n<p>  location /open/ {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://119.23.62.150:10004/open/;\n</code></pre><p>  }<br>}</p>\n<p>server {<br>  listen 80;</p>\n<p>  server_name ynplatform.wulianedu.cc;   # 请修改为你的域名</p>\n<p>  server_tokens off;<br>  access_log  /var/log/nginx/nginx_access.log;<br>  error_log   /var/log/nginx/nginx_error.log;</p>\n<p>  location / {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://127.0.0.1/platform/;\n</code></pre><p>  }</p>\n<p>  location /platform/ {<br>    proxy_read_timeout 300000;<br>    proxy_connect_timeout 300000;<br>    proxy_redirect     off;</p>\n<pre><code>proxy_set_header   X-Forwarded-Proto $scheme;\nproxy_set_header   Host              $http_host;\nproxy_set_header   X-Real-IP         $remote_addr;\nproxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\nproxy_set_header   X-Frame-Options   SAMEORIGIN;\n\nproxy_pass http://119.23.62.150:10001/platform/;\n</code></pre><p>  }<br>}</p>\n<hr>\n"},{"title":"ubuntu14.04 安装配置JDK1.7","date":"2017-05-05T05:51:49.000Z","_content":"\n# ubuntu14.04 安装配置JDK1.7\n\n## 1,下载jdk-7u45-linux-x64.tar.gz \n    \n\thttp://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\n    \n---\n## 2, 解压JDK \n```\nsudo tar zxvf jdk-7u45-linux-x64.tar.gz  -C /usr/lib/jvm   \n```\n\n---\n##  3,设置环境变量（全局） \n```\nsudo gedit  /etc/profile  \n```\n   打开profile文件输入\n```\nexport JAVA_HOME=/usr/lib/jvm/jdk1.7.0_65  \nexport CLASSPATH=\".:$JAVA_HOME/lib:$CLASSPATH\"  \nexport PATH=\"$JAVA_HOME/bin:$PATH\"  \n``` \n##  4,设置系统默认JDK \n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_65/bin/java 300  \nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_5/bin/javac 300  \nsudo update-alternatives --config java\n```\n##  5, 验证JDK\n   输入命令 \n ```\njava -version  \n```\n   见到JDK的信息则表示成功。","source":"_posts/jdk.md","raw":"---\ntitle: ubuntu14.04 安装配置JDK1.7\ndate: 2017-05-05 13:51:49\ntags: server,linux,ubuntu\n---\n\n# ubuntu14.04 安装配置JDK1.7\n\n## 1,下载jdk-7u45-linux-x64.tar.gz \n    \n\thttp://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\n    \n---\n## 2, 解压JDK \n```\nsudo tar zxvf jdk-7u45-linux-x64.tar.gz  -C /usr/lib/jvm   \n```\n\n---\n##  3,设置环境变量（全局） \n```\nsudo gedit  /etc/profile  \n```\n   打开profile文件输入\n```\nexport JAVA_HOME=/usr/lib/jvm/jdk1.7.0_65  \nexport CLASSPATH=\".:$JAVA_HOME/lib:$CLASSPATH\"  \nexport PATH=\"$JAVA_HOME/bin:$PATH\"  \n``` \n##  4,设置系统默认JDK \n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_65/bin/java 300  \nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_5/bin/javac 300  \nsudo update-alternatives --config java\n```\n##  5, 验证JDK\n   输入命令 \n ```\njava -version  \n```\n   见到JDK的信息则表示成功。","slug":"jdk","published":1,"updated":"2017-05-04T09:00:34.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdl8r0008w0vimhoe26d2","content":"<h1 id=\"ubuntu14-04-安装配置JDK1-7\"><a href=\"#ubuntu14-04-安装配置JDK1-7\" class=\"headerlink\" title=\"ubuntu14.04 安装配置JDK1.7\"></a>ubuntu14.04 安装配置JDK1.7</h1><h2 id=\"1-下载jdk-7u45-linux-x64-tar-gz\"><a href=\"#1-下载jdk-7u45-linux-x64-tar-gz\" class=\"headerlink\" title=\"1,下载jdk-7u45-linux-x64.tar.gz\"></a>1,下载jdk-7u45-linux-x64.tar.gz</h2><pre><code>http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\n</code></pre><hr>\n<h2 id=\"2-解压JDK\"><a href=\"#2-解压JDK\" class=\"headerlink\" title=\"2, 解压JDK\"></a>2, 解压JDK</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-7u45-linux-x64.tar.gz  -C /usr/lib/jvm</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-设置环境变量（全局）\"><a href=\"#3-设置环境变量（全局）\" class=\"headerlink\" title=\"3,设置环境变量（全局）\"></a>3,设置环境变量（全局）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gedit  /etc/profile</div></pre></td></tr></table></figure>\n<p>   打开profile文件输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_65  </div><div class=\"line\">export CLASSPATH=&quot;.:$JAVA_HOME/lib:$CLASSPATH&quot;  </div><div class=\"line\">export PATH=&quot;$JAVA_HOME/bin:$PATH&quot;  </div><div class=\"line\">``` </div><div class=\"line\">##  4,设置系统默认JDK</div></pre></td></tr></table></figure></p>\n<p>sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_65/bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_5/bin/javac 300<br>sudo update-alternatives –config java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">##  5, 验证JDK</div><div class=\"line\">   输入命令</div></pre></td></tr></table></figure></p>\n<p>java -version<br>```<br>   见到JDK的信息则表示成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ubuntu14-04-安装配置JDK1-7\"><a href=\"#ubuntu14-04-安装配置JDK1-7\" class=\"headerlink\" title=\"ubuntu14.04 安装配置JDK1.7\"></a>ubuntu14.04 安装配置JDK1.7</h1><h2 id=\"1-下载jdk-7u45-linux-x64-tar-gz\"><a href=\"#1-下载jdk-7u45-linux-x64-tar-gz\" class=\"headerlink\" title=\"1,下载jdk-7u45-linux-x64.tar.gz\"></a>1,下载jdk-7u45-linux-x64.tar.gz</h2><pre><code>http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\n</code></pre><hr>\n<h2 id=\"2-解压JDK\"><a href=\"#2-解压JDK\" class=\"headerlink\" title=\"2, 解压JDK\"></a>2, 解压JDK</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-7u45-linux-x64.tar.gz  -C /usr/lib/jvm</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-设置环境变量（全局）\"><a href=\"#3-设置环境变量（全局）\" class=\"headerlink\" title=\"3,设置环境变量（全局）\"></a>3,设置环境变量（全局）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gedit  /etc/profile</div></pre></td></tr></table></figure>\n<p>   打开profile文件输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_65  </div><div class=\"line\">export CLASSPATH=&quot;.:$JAVA_HOME/lib:$CLASSPATH&quot;  </div><div class=\"line\">export PATH=&quot;$JAVA_HOME/bin:$PATH&quot;  </div><div class=\"line\">``` </div><div class=\"line\">##  4,设置系统默认JDK</div></pre></td></tr></table></figure></p>\n<p>sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_65/bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_5/bin/javac 300<br>sudo update-alternatives –config java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">##  5, 验证JDK</div><div class=\"line\">   输入命令</div></pre></td></tr></table></figure></p>\n<p>java -version<br>```<br>   见到JDK的信息则表示成功。</p>\n"},{"title":"html转pdf,截图保存","date":"2016-05-03T05:51:49.000Z","_content":" \n#  使用技术\n```\nitext.jar  : 将byte文件输入流转换为图片，pdf等\nhtml2canvas.js ：将html页面区域截图为base64编码的图片资源 \njava+js\n```\n\n\n# 1. 准备资源\n1.  itext.jar\n\n```\n www.baidu.com\n```\n\n2.  html2canvas.js\n```\nwww.baidu.com\n```\n\n# 2.前端代码：\n```\n\n    //进行截图操作，document.querySelector(\"body\") 为要截图的区域\n     function test() {\n            html2canvas(document.querySelector(\"body\"), {\n                onrendered: function (canvas) {\n                    var dataUrl = canvas.toDataURL('image/png');\n                    var formData = new FormData(); //模拟表单对象\n                    formData.append(\"imgData\", convertBase64UrlToBlob(dataUrl)); //写入数据\n                    var xhr = new XMLHttpRequest(); //数据传输方法\n                    xhr.open(\"POST\", \"http://localhost:8080/pdf\"); //配置传输方式及地址\n                    xhr.send(formData);\n                    xhr.onreadystatechange = function () { //回调函数\n                    };\n                }\n            });\n        }\n\n        //格式化图片base64编码转换为byte文件流\n        function convertBase64UrlToBlob(urlData){\n            //去掉url的头，并转换为byte\n            var bytes=window.atob(urlData.split(',')[1]);\n            //处理异常,将ascii码小于0的转换为大于0\n            var ab = new ArrayBuffer(bytes.length);\n            var ia = new Uint8Array(ab);\n            for (var s = 0;s<bytes.length;s++){\n                ia[s] = bytes.charCodeAt(s);\n            }\n            return new Blob( [ab] , {type : 'image/png'});\n        }\n        \n        <body onclick=\"test()\">//调用截图方法即可\n```\n\n# 3.后端代码：   \n\n```\n\n@RequestMapping(value = \"/pdf\",method = RequestMethod.POST)\n    public void test(MultipartHttpServletRequest request, HttpServletResponse response) throws IOException {\n        String filePath = \"D:\\\\blog\\\\exportPdf2.pdf\";\n        String imagePath = \"D:\\\\blog\\\\exportImg2.png\";\n        Document document = new Document();\n        try{\n            Map getMap = request.getFileMap();\n            MultipartFile mfile = (MultipartFile) getMap.get(\"imgData\"); //获取数据\n            InputStream file = mfile.getInputStream();\n            byte[] fileByte = FileCopyUtils.copyToByteArray(file);\n\n            FileImageOutputStream imageOutput = new FileImageOutputStream(new File(imagePath));//打开输入流\n            imageOutput.write(fileByte, 0, fileByte.length);//生成本地图片文件\n            imageOutput.close();\n\n            PdfWriter.getInstance(document, new FileOutputStream(filePath)); //itextpdf文件\n            document.open();\n            document.add(new Paragraph(\"JUST TEST ...\"));\n            Image image = Image.getInstance(imagePath); //itext-pdf-image\n            float heigth = image.getHeight();\n            float width = image.getWidth();\n            int percent = getPercent2(heigth, width);  //按比例缩小图片\n            image.setAlignment(Image.MIDDLE);\n            image.scalePercent(percent+3);\n            document.add(image);\n            document.close();\n\n        }catch (DocumentException de) {\n            System.err.println(de.getMessage());\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n\n        }\n    }\n\n    private static int getPercent2(float h, float w) {\n        int p = 0;\n        float p2 = 0.0f;\n        p2 = 530 / w * 100;\n        p = Math.round(p2);\n        return p;\n    }\n```\n\n\n## 4 包名\n     \n```\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Image;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\n\nimport javax.imageio.stream.FileImageOutputStream;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n```\n\n\n# 4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\n     有兴趣的同学可以把后端改为下载文件到本地\n\t \n# 5 项目源码地址\t\n ```\nhttps://github.com/zhangjy520/learn_java/tree/master/boot\t\n```","source":"_posts/java_scroll_pdf.md","raw":"---\ntitle: html转pdf,截图保存\ndate: 2016-05-03 13:51:49\ntags: java\n---\n \n#  使用技术\n```\nitext.jar  : 将byte文件输入流转换为图片，pdf等\nhtml2canvas.js ：将html页面区域截图为base64编码的图片资源 \njava+js\n```\n\n\n# 1. 准备资源\n1.  itext.jar\n\n```\n www.baidu.com\n```\n\n2.  html2canvas.js\n```\nwww.baidu.com\n```\n\n# 2.前端代码：\n```\n\n    //进行截图操作，document.querySelector(\"body\") 为要截图的区域\n     function test() {\n            html2canvas(document.querySelector(\"body\"), {\n                onrendered: function (canvas) {\n                    var dataUrl = canvas.toDataURL('image/png');\n                    var formData = new FormData(); //模拟表单对象\n                    formData.append(\"imgData\", convertBase64UrlToBlob(dataUrl)); //写入数据\n                    var xhr = new XMLHttpRequest(); //数据传输方法\n                    xhr.open(\"POST\", \"http://localhost:8080/pdf\"); //配置传输方式及地址\n                    xhr.send(formData);\n                    xhr.onreadystatechange = function () { //回调函数\n                    };\n                }\n            });\n        }\n\n        //格式化图片base64编码转换为byte文件流\n        function convertBase64UrlToBlob(urlData){\n            //去掉url的头，并转换为byte\n            var bytes=window.atob(urlData.split(',')[1]);\n            //处理异常,将ascii码小于0的转换为大于0\n            var ab = new ArrayBuffer(bytes.length);\n            var ia = new Uint8Array(ab);\n            for (var s = 0;s<bytes.length;s++){\n                ia[s] = bytes.charCodeAt(s);\n            }\n            return new Blob( [ab] , {type : 'image/png'});\n        }\n        \n        <body onclick=\"test()\">//调用截图方法即可\n```\n\n# 3.后端代码：   \n\n```\n\n@RequestMapping(value = \"/pdf\",method = RequestMethod.POST)\n    public void test(MultipartHttpServletRequest request, HttpServletResponse response) throws IOException {\n        String filePath = \"D:\\\\blog\\\\exportPdf2.pdf\";\n        String imagePath = \"D:\\\\blog\\\\exportImg2.png\";\n        Document document = new Document();\n        try{\n            Map getMap = request.getFileMap();\n            MultipartFile mfile = (MultipartFile) getMap.get(\"imgData\"); //获取数据\n            InputStream file = mfile.getInputStream();\n            byte[] fileByte = FileCopyUtils.copyToByteArray(file);\n\n            FileImageOutputStream imageOutput = new FileImageOutputStream(new File(imagePath));//打开输入流\n            imageOutput.write(fileByte, 0, fileByte.length);//生成本地图片文件\n            imageOutput.close();\n\n            PdfWriter.getInstance(document, new FileOutputStream(filePath)); //itextpdf文件\n            document.open();\n            document.add(new Paragraph(\"JUST TEST ...\"));\n            Image image = Image.getInstance(imagePath); //itext-pdf-image\n            float heigth = image.getHeight();\n            float width = image.getWidth();\n            int percent = getPercent2(heigth, width);  //按比例缩小图片\n            image.setAlignment(Image.MIDDLE);\n            image.scalePercent(percent+3);\n            document.add(image);\n            document.close();\n\n        }catch (DocumentException de) {\n            System.err.println(de.getMessage());\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n\n        }\n    }\n\n    private static int getPercent2(float h, float w) {\n        int p = 0;\n        float p2 = 0.0f;\n        p2 = 530 / w * 100;\n        p = Math.round(p2);\n        return p;\n    }\n```\n\n\n## 4 包名\n     \n```\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Image;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\n\nimport javax.imageio.stream.FileImageOutputStream;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n```\n\n\n# 4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\n     有兴趣的同学可以把后端改为下载文件到本地\n\t \n# 5 项目源码地址\t\n ```\nhttps://github.com/zhangjy520/learn_java/tree/master/boot\t\n```","slug":"java_scroll_pdf","published":1,"updated":"2017-05-04T09:59:47.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdlat000gw0vi99nzeydg","content":"<h1 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext.jar  : 将byte文件输入流转换为图片，pdf等</div><div class=\"line\">html2canvas.js ：将html页面区域截图为base64编码的图片资源 </div><div class=\"line\">java+js</div></pre></td></tr></table></figure>\n<h1 id=\"1-准备资源\"><a href=\"#1-准备资源\" class=\"headerlink\" title=\"1. 准备资源\"></a>1. 准备资源</h1><ol>\n<li>itext.jar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.baidu.com</div></pre></td></tr></table></figure>\n<ol>\n<li>html2canvas.js<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.baidu.com</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"2-前端代码：\"><a href=\"#2-前端代码：\" class=\"headerlink\" title=\"2.前端代码：\"></a>2.前端代码：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//进行截图操作，document.querySelector(&quot;body&quot;) 为要截图的区域</div><div class=\"line\"> function test() &#123;</div><div class=\"line\">        html2canvas(document.querySelector(&quot;body&quot;), &#123;</div><div class=\"line\">            onrendered: function (canvas) &#123;</div><div class=\"line\">                var dataUrl = canvas.toDataURL(&apos;image/png&apos;);</div><div class=\"line\">                var formData = new FormData(); //模拟表单对象</div><div class=\"line\">                formData.append(&quot;imgData&quot;, convertBase64UrlToBlob(dataUrl)); //写入数据</div><div class=\"line\">                var xhr = new XMLHttpRequest(); //数据传输方法</div><div class=\"line\">                xhr.open(&quot;POST&quot;, &quot;http://localhost:8080/pdf&quot;); //配置传输方式及地址</div><div class=\"line\">                xhr.send(formData);</div><div class=\"line\">                xhr.onreadystatechange = function () &#123; //回调函数</div><div class=\"line\">                &#125;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //格式化图片base64编码转换为byte文件流</div><div class=\"line\">    function convertBase64UrlToBlob(urlData)&#123;</div><div class=\"line\">        //去掉url的头，并转换为byte</div><div class=\"line\">        var bytes=window.atob(urlData.split(&apos;,&apos;)[1]);</div><div class=\"line\">        //处理异常,将ascii码小于0的转换为大于0</div><div class=\"line\">        var ab = new ArrayBuffer(bytes.length);</div><div class=\"line\">        var ia = new Uint8Array(ab);</div><div class=\"line\">        for (var s = 0;s&lt;bytes.length;s++)&#123;</div><div class=\"line\">            ia[s] = bytes.charCodeAt(s);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return new Blob( [ab] , &#123;type : &apos;image/png&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    &lt;body onclick=&quot;test()&quot;&gt;//调用截图方法即可</div></pre></td></tr></table></figure>\n<h1 id=\"3-后端代码：\"><a href=\"#3-后端代码：\" class=\"headerlink\" title=\"3.后端代码：\"></a>3.后端代码：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@RequestMapping(value = &quot;/pdf&quot;,method = RequestMethod.POST)</div><div class=\"line\">    public void test(MultipartHttpServletRequest request, HttpServletResponse response) throws IOException &#123;</div><div class=\"line\">        String filePath = &quot;D:\\\\blog\\\\exportPdf2.pdf&quot;;</div><div class=\"line\">        String imagePath = &quot;D:\\\\blog\\\\exportImg2.png&quot;;</div><div class=\"line\">        Document document = new Document();</div><div class=\"line\">        try&#123;</div><div class=\"line\">            Map getMap = request.getFileMap();</div><div class=\"line\">            MultipartFile mfile = (MultipartFile) getMap.get(&quot;imgData&quot;); //获取数据</div><div class=\"line\">            InputStream file = mfile.getInputStream();</div><div class=\"line\">            byte[] fileByte = FileCopyUtils.copyToByteArray(file);</div><div class=\"line\"></div><div class=\"line\">            FileImageOutputStream imageOutput = new FileImageOutputStream(new File(imagePath));//打开输入流</div><div class=\"line\">            imageOutput.write(fileByte, 0, fileByte.length);//生成本地图片文件</div><div class=\"line\">            imageOutput.close();</div><div class=\"line\"></div><div class=\"line\">            PdfWriter.getInstance(document, new FileOutputStream(filePath)); //itextpdf文件</div><div class=\"line\">            document.open();</div><div class=\"line\">            document.add(new Paragraph(&quot;JUST TEST ...&quot;));</div><div class=\"line\">            Image image = Image.getInstance(imagePath); //itext-pdf-image</div><div class=\"line\">            float heigth = image.getHeight();</div><div class=\"line\">            float width = image.getWidth();</div><div class=\"line\">            int percent = getPercent2(heigth, width);  //按比例缩小图片</div><div class=\"line\">            image.setAlignment(Image.MIDDLE);</div><div class=\"line\">            image.scalePercent(percent+3);</div><div class=\"line\">            document.add(image);</div><div class=\"line\">            document.close();</div><div class=\"line\"></div><div class=\"line\">        &#125;catch (DocumentException de) &#123;</div><div class=\"line\">            System.err.println(de.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">        catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private static int getPercent2(float h, float w) &#123;</div><div class=\"line\">        int p = 0;</div><div class=\"line\">        float p2 = 0.0f;</div><div class=\"line\">        p2 = 530 / w * 100;</div><div class=\"line\">        p = Math.round(p2);</div><div class=\"line\">        return p;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-包名\"><a href=\"#4-包名\" class=\"headerlink\" title=\"4 包名\"></a>4 包名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import com.itextpdf.text.Document;</div><div class=\"line\">import com.itextpdf.text.DocumentException;</div><div class=\"line\">import com.itextpdf.text.Image;</div><div class=\"line\">import com.itextpdf.text.Paragraph;</div><div class=\"line\">import com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\">import org.springframework.boot.SpringApplication;</div><div class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\">import org.springframework.stereotype.Controller;</div><div class=\"line\">import org.springframework.util.FileCopyUtils;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMethod;</div><div class=\"line\">import org.springframework.web.multipart.MultipartFile;</div><div class=\"line\">import org.springframework.web.multipart.MultipartHttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.stream.FileImageOutputStream;</div><div class=\"line\">import javax.servlet.http.HttpServletResponse;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.util.Map;</div></pre></td></tr></table></figure>\n<h1 id=\"4-前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\"><a href=\"#4-前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\" class=\"headerlink\" title=\"4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\"></a>4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。</h1><pre><code>有兴趣的同学可以把后端改为下载文件到本地\n</code></pre><h1 id=\"5-项目源码地址\"><a href=\"#5-项目源码地址\" class=\"headerlink\" title=\"5 项目源码地址\"></a>5 项目源码地址</h1> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/zhangjy520/learn_java/tree/master/boot</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext.jar  : 将byte文件输入流转换为图片，pdf等</div><div class=\"line\">html2canvas.js ：将html页面区域截图为base64编码的图片资源 </div><div class=\"line\">java+js</div></pre></td></tr></table></figure>\n<h1 id=\"1-准备资源\"><a href=\"#1-准备资源\" class=\"headerlink\" title=\"1. 准备资源\"></a>1. 准备资源</h1><ol>\n<li>itext.jar</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.baidu.com</div></pre></td></tr></table></figure>\n<ol>\n<li>html2canvas.js<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.baidu.com</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"2-前端代码：\"><a href=\"#2-前端代码：\" class=\"headerlink\" title=\"2.前端代码：\"></a>2.前端代码：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//进行截图操作，document.querySelector(&quot;body&quot;) 为要截图的区域</div><div class=\"line\"> function test() &#123;</div><div class=\"line\">        html2canvas(document.querySelector(&quot;body&quot;), &#123;</div><div class=\"line\">            onrendered: function (canvas) &#123;</div><div class=\"line\">                var dataUrl = canvas.toDataURL(&apos;image/png&apos;);</div><div class=\"line\">                var formData = new FormData(); //模拟表单对象</div><div class=\"line\">                formData.append(&quot;imgData&quot;, convertBase64UrlToBlob(dataUrl)); //写入数据</div><div class=\"line\">                var xhr = new XMLHttpRequest(); //数据传输方法</div><div class=\"line\">                xhr.open(&quot;POST&quot;, &quot;http://localhost:8080/pdf&quot;); //配置传输方式及地址</div><div class=\"line\">                xhr.send(formData);</div><div class=\"line\">                xhr.onreadystatechange = function () &#123; //回调函数</div><div class=\"line\">                &#125;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //格式化图片base64编码转换为byte文件流</div><div class=\"line\">    function convertBase64UrlToBlob(urlData)&#123;</div><div class=\"line\">        //去掉url的头，并转换为byte</div><div class=\"line\">        var bytes=window.atob(urlData.split(&apos;,&apos;)[1]);</div><div class=\"line\">        //处理异常,将ascii码小于0的转换为大于0</div><div class=\"line\">        var ab = new ArrayBuffer(bytes.length);</div><div class=\"line\">        var ia = new Uint8Array(ab);</div><div class=\"line\">        for (var s = 0;s&lt;bytes.length;s++)&#123;</div><div class=\"line\">            ia[s] = bytes.charCodeAt(s);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return new Blob( [ab] , &#123;type : &apos;image/png&apos;&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    &lt;body onclick=&quot;test()&quot;&gt;//调用截图方法即可</div></pre></td></tr></table></figure>\n<h1 id=\"3-后端代码：\"><a href=\"#3-后端代码：\" class=\"headerlink\" title=\"3.后端代码：\"></a>3.后端代码：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@RequestMapping(value = &quot;/pdf&quot;,method = RequestMethod.POST)</div><div class=\"line\">    public void test(MultipartHttpServletRequest request, HttpServletResponse response) throws IOException &#123;</div><div class=\"line\">        String filePath = &quot;D:\\\\blog\\\\exportPdf2.pdf&quot;;</div><div class=\"line\">        String imagePath = &quot;D:\\\\blog\\\\exportImg2.png&quot;;</div><div class=\"line\">        Document document = new Document();</div><div class=\"line\">        try&#123;</div><div class=\"line\">            Map getMap = request.getFileMap();</div><div class=\"line\">            MultipartFile mfile = (MultipartFile) getMap.get(&quot;imgData&quot;); //获取数据</div><div class=\"line\">            InputStream file = mfile.getInputStream();</div><div class=\"line\">            byte[] fileByte = FileCopyUtils.copyToByteArray(file);</div><div class=\"line\"></div><div class=\"line\">            FileImageOutputStream imageOutput = new FileImageOutputStream(new File(imagePath));//打开输入流</div><div class=\"line\">            imageOutput.write(fileByte, 0, fileByte.length);//生成本地图片文件</div><div class=\"line\">            imageOutput.close();</div><div class=\"line\"></div><div class=\"line\">            PdfWriter.getInstance(document, new FileOutputStream(filePath)); //itextpdf文件</div><div class=\"line\">            document.open();</div><div class=\"line\">            document.add(new Paragraph(&quot;JUST TEST ...&quot;));</div><div class=\"line\">            Image image = Image.getInstance(imagePath); //itext-pdf-image</div><div class=\"line\">            float heigth = image.getHeight();</div><div class=\"line\">            float width = image.getWidth();</div><div class=\"line\">            int percent = getPercent2(heigth, width);  //按比例缩小图片</div><div class=\"line\">            image.setAlignment(Image.MIDDLE);</div><div class=\"line\">            image.scalePercent(percent+3);</div><div class=\"line\">            document.add(image);</div><div class=\"line\">            document.close();</div><div class=\"line\"></div><div class=\"line\">        &#125;catch (DocumentException de) &#123;</div><div class=\"line\">            System.err.println(de.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">        catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private static int getPercent2(float h, float w) &#123;</div><div class=\"line\">        int p = 0;</div><div class=\"line\">        float p2 = 0.0f;</div><div class=\"line\">        p2 = 530 / w * 100;</div><div class=\"line\">        p = Math.round(p2);</div><div class=\"line\">        return p;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-包名\"><a href=\"#4-包名\" class=\"headerlink\" title=\"4 包名\"></a>4 包名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import com.itextpdf.text.Document;</div><div class=\"line\">import com.itextpdf.text.DocumentException;</div><div class=\"line\">import com.itextpdf.text.Image;</div><div class=\"line\">import com.itextpdf.text.Paragraph;</div><div class=\"line\">import com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\">import org.springframework.boot.SpringApplication;</div><div class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\">import org.springframework.stereotype.Controller;</div><div class=\"line\">import org.springframework.util.FileCopyUtils;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMethod;</div><div class=\"line\">import org.springframework.web.multipart.MultipartFile;</div><div class=\"line\">import org.springframework.web.multipart.MultipartHttpServletRequest;</div><div class=\"line\"></div><div class=\"line\">import javax.imageio.stream.FileImageOutputStream;</div><div class=\"line\">import javax.servlet.http.HttpServletResponse;</div><div class=\"line\">import java.io.File;</div><div class=\"line\">import java.io.FileOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.util.Map;</div></pre></td></tr></table></figure>\n<h1 id=\"4-前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\"><a href=\"#4-前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\" class=\"headerlink\" title=\"4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。\"></a>4 前端截图，访问后端接口，保存截图文件到本地为pdf或者其他格式的文件。</h1><pre><code>有兴趣的同学可以把后端改为下载文件到本地\n</code></pre><h1 id=\"5-项目源码地址\"><a href=\"#5-项目源码地址\" class=\"headerlink\" title=\"5 项目源码地址\"></a>5 项目源码地址</h1> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/zhangjy520/learn_java/tree/master/boot</div></pre></td></tr></table></figure>"},{"title":"状态模式 多个if else","date":"2016-05-03T05:51:49.000Z","_content":"\n# 1 需求\n\n![](state_design_pattern/1.png)\n\n\n```\n实现客户  预定/入住/退订/退房  房间的功能\n```\n\n## 1.1 不太华丽的实现  if-else\n\n常量定义\n\n```\npublic static final int FREEMTIME_STATE = 0;  //空闲状态  \npublic static final int BOOKED_STATE = 1;     //已预订状态  \npublic static final int CHECKIN_STATE = 2;    //入住状态  \nint state = FREEMTIME_STATE;     //初始状态  \n```\n\n客户动作类（预定，入住，退订，退房）\n\n```\n/** \n     * @desc 预订 \n     * @return void \n     */  \n    public void bookRoom(){  \n        if(state == FREEMTIME_STATE){   //空闲可预订  \n            if(count > 0){  \n                System.out.println(\"空闲房间，完成预订...\");  \n                state =  BOOKED_STATE;     //改变状态：已预订  \n                count --;  \n                //房间预订完了,提示客户没有房源了  \n                if(count == 0){  \n                    System.out.println(\"不好意思,房间已经预订完,欢迎您下次光临...\");  \n                }  \n            }  \n            else{  \n                System.out.println(\"不好意思,已经没有房间了....\");  \n            }  \n        }  \n        else if(state == BOOKED_STATE){  \n            System.out.println(\"该房间已经被预订了...\");  \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"该房间已经有人入住了...\");  \n        }  \n    }  \n      \n    /** \n     * @desc 入住 \n     * @return void \n     */  \n    public void checkInRoom(){  \n        if(state == FREEMTIME_STATE){  \n            if(count > 0){  \n                System.out.println(\"空闲房间，入住...\");  \n                state =  CHECKIN_STATE;     //改变状态：已预订  \n                count --;  \n                //房间预订完了,提示客户没有房源了  \n                if(count == 0){  \n                    System.out.println(\"不好意思,房间已经预订完,欢迎您下次光临...\");  \n                }  \n            }  \n            else{  \n                System.out.println(\"不好意思,已经没有房间了....\");  \n            }  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n            if(\"如果该房间是您预订的\"){  \n                System.out.println(\"入住....\");  \n                state = CHECKIN_STATE;  \n            }  \n            else{  \n                System.out.println(\"您没有预订该房间,请先预订...\");  \n            }  \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"该房间已经入住了...\");  \n        }  \n    }  \n      \n    /** \n     * @desc 退订 \n     * @return void \n     */  \n    public void unsubscribeRoom(){  \n        if(state == FREEMTIME_STATE){  \n        }  \n        else if(state == CHECKIN_STATE){  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n            System.out.println(\"已退订房间...\");  \n            state = FREEMTIME_STATE;  \n            count ++;  \n        }  \n    }  \n      \n    /** \n     * @desc 退房 \n     * @return void \n     */  \n    public void checkOutRoom(){  \n        if(state == FREEMTIME_STATE){  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n              \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"已退房..\");  \n            state = FREEMTIME_STATE;  \n            count++;  \n        }  \n    }  \n```\n\n当添加状态的时候，例如：损坏房间  则需要每个操作都要判断是否损坏房间\n\n\n# 2 使用状态模式 华丽实现 \n\n## 2.1 模式定义 \n1. 在很多情况下，一个对象的行为取决于它的一个或多个变化的属性，这些属性我们称之为状态，这个对象称之为状态对象。对于状态对象而已，它的行为依赖于它的状态，比如你要预订房间，那么只有当该房间为空闲时你才能预订，你想入住该房间也只有当你预订了该房间或者该房间为空闲时。对于这样的一个对象，当它在于外部事件产生互动的时候，其内部状态就会发生改变，从而使得他的行为也随之发生改变。\n2. 那么何为状态模式呢？所谓状态模式就是允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。\n \n\n![](state_design_pattern/2.png)\n\n\t 1.  状态模式包含如下角色： \n     2.  Context: 环境类。可以包括一些内部状态。 \n     3.  State: 抽象状态类。State定义了一个所有具体状态的共同接口，任何状态都实现这个相同的接口，这样一来，状态之间就可以互相转换了。 \n     4.  ConcreteState:具体状态类。具体状态类，用于处理来自Context的请求，每一个ConcreteState都提供了它对自己请求的实现，所以，当Context改变状态时行为也会跟着改变。\n\n# 3 代码实现\n\n\n![](state_design_pattern/3.png)\n\n## 3.1 状态接口代码：State.java\n```\npublic interface State {  \n    /**  \n     * @desc 预订房间  \n     * @return void  \n     */  \n    public void bookRoom();  \n      \n    /**  \n     * @desc 退订房间  \n     * @return void  \n     */  \n    public void unsubscribeRoom();  \n      \n    /**  \n     * @desc 入住  \n     * @return void  \n     */  \n    public void checkInRoom();  \n      \n    /**  \n     * @desc 退房  \n     * @return void  \n     */  \n    public void checkOutRoom();  \n      \n}  \n       然后是房间类  \npublic class Room {  \n    /*  \n     * 房间的三个状态  \n     */  \n    State freeTimeState;    //空闲状态  \n    State checkInState;     //入住状态  \n    State bookedState;      //预订状态  \n  \n    State state ;    \n      \n    public Room(){  \n        freeTimeState = new FreeTimeState(this);  \n        checkInState = new CheckInState(this);  \n        bookedState = new BookedState(this);  \n          \n        state = freeTimeState ;  //初始状态为空闲  \n    }  \n      \n    /**  \n     * @desc 预订房间  \n     * @return void  \n     */  \n    public void bookRoom(){  \n        state.bookRoom();  \n    }  \n      \n    /**  \n     * @desc 退订房间  \n     * @return void  \n     */  \n    public void unsubscribeRoom(){  \n        state.unsubscribeRoom();  \n    }  \n      \n    /**  \n     * @desc 入住  \n     * @return void  \n     */  \n    public void checkInRoom(){  \n        state.checkInRoom();  \n    }  \n      \n    /**  \n     * @desc 退房  \n     * @return void  \n     */  \n    public void checkOutRoom(){  \n        state.checkOutRoom();  \n    }  \n  \n    public String toString(){  \n        return \"该房间的状态是:\"+getState().getClass().getName();  \n    }  \n      \n    /*  \n     * getter和setter方法  \n     */  \n      \n    public State getFreeTimeState() {  \n        return freeTimeState;  \n    }  \n  \n    public void setFreeTimeState(State freeTimeState) {  \n        this.freeTimeState = freeTimeState;  \n    }  \n  \n    public State getCheckInState() {  \n        return checkInState;  \n    }  \n  \n    public void setCheckInState(State checkInState) {  \n        this.checkInState = checkInState;  \n    }  \n  \n    public State getBookedState() {  \n        return bookedState;  \n    }  \n  \n    public void setBookedState(State bookedState) {  \n        this.bookedState = bookedState;  \n    }  \n  \n    public State getState() {  \n        return state;  \n    }  \n  \n    public void setState(State state) {  \n        this.state = state;  \n    }  \n  \n}  \n```\n\n## 3.2 状态接口实现类：空闲，预定，入住\n```\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 空闲状态只能预订和入住 \n */  \npublic class FreeTimeState implements State {  \n      \n    Room hotelManagement;  \n      \n    public FreeTimeState(Room hotelManagement){  \n        this.hotelManagement = hotelManagement;  \n    }  \n      \n      \n    public void bookRoom() {  \n        System.out.println(\"您已经成功预订了...\");  \n        hotelManagement.setState(hotelManagement.getBookedState());   //状态变成已经预订  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"您已经成功入住了...\");  \n        hotelManagement.setState(hotelManagement.getCheckInState());   //状态变成已经入住  \n    }  \n  \n    public void checkOutRoom() {  \n        //不需要做操作  \n    }  \n  \n    public void unsubscribeRoom() {  \n        //不需要做操作  \n    }  \n  \n}  \n\n\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 入住状态房间只能退房 \n */  \n\npublic class BookedState implements State {  \n    Room hotelManagement;  \n      \n    public BookedState(Room hotelManagement) {  \n        this.hotelManagement = hotelManagement;  \n    }  \n  \n    public void bookRoom() {  \n        System.out.println(\"该房间已近给预定了...\");  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"入住成功...\");   \n        hotelManagement.setState(hotelManagement.getCheckInState());         //状态变成入住  \n    }  \n  \n    public void checkOutRoom() {  \n        //不需要做操作  \n    }  \n  \n    public void unsubscribeRoom() {  \n        System.out.println(\"退订成功,欢迎下次光临...\");  \n        hotelManagement.setState(hotelManagement.getFreeTimeState());   //变成空闲状态  \n    }  \n  \n}  \n\n\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 入住可以退房 \n */  \n\n\npublic class CheckInState implements State {  \n    Room hotelManagement;  \n    public CheckInState(Room hotelManagement) {  \n        this.hotelManagement = hotelManagement;  \n    }  \n  \n    public void bookRoom() {  \n        System.out.println(\"该房间已经入住了...\");  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"该房间已经入住了...\");  \n    }  \n  \n    public void checkOutRoom() {  \n        System.out.println(\"退房成功....\");  \n        hotelManagement.setState(hotelManagement.getFreeTimeState());     //状态变成空闲  \n    }  \n  \n    public void unsubscribeRoom() {  \n        //不需要做操作  \n    }  \n  \n}  \n```\n\n## 3.3 测试类\n```\npublic class Test {  \n    public static void main(String[] args) {  \n        //有3间房  \n        Room[] rooms = new Room[2];  \n        //初始化  \n        for(int i = 0 ; i < rooms.length ; i++){  \n            rooms[i] = new Room();  \n        }  \n        //第一间房  \n        rooms[0].bookRoom();    //预订  \n        rooms[0].checkInRoom();   //入住  \n        rooms[0].bookRoom();    //预订  \n        System.out.println(rooms[0]);  \n        System.out.println(\"---------------------------\");  \n          \n        //第二间房  \n        rooms[1].checkInRoom();  \n        rooms[1].bookRoom();  \n        rooms[1].checkOutRoom();  \n        rooms[1].bookRoom();  \n        System.out.println(rooms[1]);  \n    }  \n  \n}  \n```\n\n![](state_design_pattern/4.png)\n# 4总结\n\n## 1. 优点\n 1. 封装了转换规则。 \n 2. 枚举可能的状态，在枚举状态之前需要确定状态种类。 \n 3. 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 \n 4. 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 \n 5. 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n  \n## 2. 缺点\n1. 状态模式的使用必然会增加系统类和对象的个数。 \n2. 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。   \n3. 状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。\n\n# 五、模式适用场景\n1. 对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。 \n2. 代码中包含大量与对象状态有关的条件语句\n# 六、模式总结\n 1. 状态模式允许一个对象基于内部状态而拥有不同的行为。\n 2. Context会将行为委托给当前状态对象。\n 3. 状态模式对“开闭原则”支持不是很好。","source":"_posts/state_design_pattern.md","raw":"---\ntitle: 状态模式 多个if else\ndate: 2016-05-03 13:51:49\ntags: java\n---\n\n# 1 需求\n\n![](state_design_pattern/1.png)\n\n\n```\n实现客户  预定/入住/退订/退房  房间的功能\n```\n\n## 1.1 不太华丽的实现  if-else\n\n常量定义\n\n```\npublic static final int FREEMTIME_STATE = 0;  //空闲状态  \npublic static final int BOOKED_STATE = 1;     //已预订状态  \npublic static final int CHECKIN_STATE = 2;    //入住状态  \nint state = FREEMTIME_STATE;     //初始状态  \n```\n\n客户动作类（预定，入住，退订，退房）\n\n```\n/** \n     * @desc 预订 \n     * @return void \n     */  \n    public void bookRoom(){  \n        if(state == FREEMTIME_STATE){   //空闲可预订  \n            if(count > 0){  \n                System.out.println(\"空闲房间，完成预订...\");  \n                state =  BOOKED_STATE;     //改变状态：已预订  \n                count --;  \n                //房间预订完了,提示客户没有房源了  \n                if(count == 0){  \n                    System.out.println(\"不好意思,房间已经预订完,欢迎您下次光临...\");  \n                }  \n            }  \n            else{  \n                System.out.println(\"不好意思,已经没有房间了....\");  \n            }  \n        }  \n        else if(state == BOOKED_STATE){  \n            System.out.println(\"该房间已经被预订了...\");  \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"该房间已经有人入住了...\");  \n        }  \n    }  \n      \n    /** \n     * @desc 入住 \n     * @return void \n     */  \n    public void checkInRoom(){  \n        if(state == FREEMTIME_STATE){  \n            if(count > 0){  \n                System.out.println(\"空闲房间，入住...\");  \n                state =  CHECKIN_STATE;     //改变状态：已预订  \n                count --;  \n                //房间预订完了,提示客户没有房源了  \n                if(count == 0){  \n                    System.out.println(\"不好意思,房间已经预订完,欢迎您下次光临...\");  \n                }  \n            }  \n            else{  \n                System.out.println(\"不好意思,已经没有房间了....\");  \n            }  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n            if(\"如果该房间是您预订的\"){  \n                System.out.println(\"入住....\");  \n                state = CHECKIN_STATE;  \n            }  \n            else{  \n                System.out.println(\"您没有预订该房间,请先预订...\");  \n            }  \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"该房间已经入住了...\");  \n        }  \n    }  \n      \n    /** \n     * @desc 退订 \n     * @return void \n     */  \n    public void unsubscribeRoom(){  \n        if(state == FREEMTIME_STATE){  \n        }  \n        else if(state == CHECKIN_STATE){  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n            System.out.println(\"已退订房间...\");  \n            state = FREEMTIME_STATE;  \n            count ++;  \n        }  \n    }  \n      \n    /** \n     * @desc 退房 \n     * @return void \n     */  \n    public void checkOutRoom(){  \n        if(state == FREEMTIME_STATE){  \n              \n        }  \n        else if(state == BOOKED_STATE){  \n              \n        }  \n        else if(state == CHECKIN_STATE){  \n            System.out.println(\"已退房..\");  \n            state = FREEMTIME_STATE;  \n            count++;  \n        }  \n    }  \n```\n\n当添加状态的时候，例如：损坏房间  则需要每个操作都要判断是否损坏房间\n\n\n# 2 使用状态模式 华丽实现 \n\n## 2.1 模式定义 \n1. 在很多情况下，一个对象的行为取决于它的一个或多个变化的属性，这些属性我们称之为状态，这个对象称之为状态对象。对于状态对象而已，它的行为依赖于它的状态，比如你要预订房间，那么只有当该房间为空闲时你才能预订，你想入住该房间也只有当你预订了该房间或者该房间为空闲时。对于这样的一个对象，当它在于外部事件产生互动的时候，其内部状态就会发生改变，从而使得他的行为也随之发生改变。\n2. 那么何为状态模式呢？所谓状态模式就是允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。\n \n\n![](state_design_pattern/2.png)\n\n\t 1.  状态模式包含如下角色： \n     2.  Context: 环境类。可以包括一些内部状态。 \n     3.  State: 抽象状态类。State定义了一个所有具体状态的共同接口，任何状态都实现这个相同的接口，这样一来，状态之间就可以互相转换了。 \n     4.  ConcreteState:具体状态类。具体状态类，用于处理来自Context的请求，每一个ConcreteState都提供了它对自己请求的实现，所以，当Context改变状态时行为也会跟着改变。\n\n# 3 代码实现\n\n\n![](state_design_pattern/3.png)\n\n## 3.1 状态接口代码：State.java\n```\npublic interface State {  \n    /**  \n     * @desc 预订房间  \n     * @return void  \n     */  \n    public void bookRoom();  \n      \n    /**  \n     * @desc 退订房间  \n     * @return void  \n     */  \n    public void unsubscribeRoom();  \n      \n    /**  \n     * @desc 入住  \n     * @return void  \n     */  \n    public void checkInRoom();  \n      \n    /**  \n     * @desc 退房  \n     * @return void  \n     */  \n    public void checkOutRoom();  \n      \n}  \n       然后是房间类  \npublic class Room {  \n    /*  \n     * 房间的三个状态  \n     */  \n    State freeTimeState;    //空闲状态  \n    State checkInState;     //入住状态  \n    State bookedState;      //预订状态  \n  \n    State state ;    \n      \n    public Room(){  \n        freeTimeState = new FreeTimeState(this);  \n        checkInState = new CheckInState(this);  \n        bookedState = new BookedState(this);  \n          \n        state = freeTimeState ;  //初始状态为空闲  \n    }  \n      \n    /**  \n     * @desc 预订房间  \n     * @return void  \n     */  \n    public void bookRoom(){  \n        state.bookRoom();  \n    }  \n      \n    /**  \n     * @desc 退订房间  \n     * @return void  \n     */  \n    public void unsubscribeRoom(){  \n        state.unsubscribeRoom();  \n    }  \n      \n    /**  \n     * @desc 入住  \n     * @return void  \n     */  \n    public void checkInRoom(){  \n        state.checkInRoom();  \n    }  \n      \n    /**  \n     * @desc 退房  \n     * @return void  \n     */  \n    public void checkOutRoom(){  \n        state.checkOutRoom();  \n    }  \n  \n    public String toString(){  \n        return \"该房间的状态是:\"+getState().getClass().getName();  \n    }  \n      \n    /*  \n     * getter和setter方法  \n     */  \n      \n    public State getFreeTimeState() {  \n        return freeTimeState;  \n    }  \n  \n    public void setFreeTimeState(State freeTimeState) {  \n        this.freeTimeState = freeTimeState;  \n    }  \n  \n    public State getCheckInState() {  \n        return checkInState;  \n    }  \n  \n    public void setCheckInState(State checkInState) {  \n        this.checkInState = checkInState;  \n    }  \n  \n    public State getBookedState() {  \n        return bookedState;  \n    }  \n  \n    public void setBookedState(State bookedState) {  \n        this.bookedState = bookedState;  \n    }  \n  \n    public State getState() {  \n        return state;  \n    }  \n  \n    public void setState(State state) {  \n        this.state = state;  \n    }  \n  \n}  \n```\n\n## 3.2 状态接口实现类：空闲，预定，入住\n```\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 空闲状态只能预订和入住 \n */  \npublic class FreeTimeState implements State {  \n      \n    Room hotelManagement;  \n      \n    public FreeTimeState(Room hotelManagement){  \n        this.hotelManagement = hotelManagement;  \n    }  \n      \n      \n    public void bookRoom() {  \n        System.out.println(\"您已经成功预订了...\");  \n        hotelManagement.setState(hotelManagement.getBookedState());   //状态变成已经预订  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"您已经成功入住了...\");  \n        hotelManagement.setState(hotelManagement.getCheckInState());   //状态变成已经入住  \n    }  \n  \n    public void checkOutRoom() {  \n        //不需要做操作  \n    }  \n  \n    public void unsubscribeRoom() {  \n        //不需要做操作  \n    }  \n  \n}  \n\n\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 入住状态房间只能退房 \n */  \n\npublic class BookedState implements State {  \n    Room hotelManagement;  \n      \n    public BookedState(Room hotelManagement) {  \n        this.hotelManagement = hotelManagement;  \n    }  \n  \n    public void bookRoom() {  \n        System.out.println(\"该房间已近给预定了...\");  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"入住成功...\");   \n        hotelManagement.setState(hotelManagement.getCheckInState());         //状态变成入住  \n    }  \n  \n    public void checkOutRoom() {  \n        //不需要做操作  \n    }  \n  \n    public void unsubscribeRoom() {  \n        System.out.println(\"退订成功,欢迎下次光临...\");  \n        hotelManagement.setState(hotelManagement.getFreeTimeState());   //变成空闲状态  \n    }  \n  \n}  \n\n\n\n/**  \n * @project: design_state   \n * @date 2013-8-24  \n * @Description: 入住可以退房 \n */  \n\n\npublic class CheckInState implements State {  \n    Room hotelManagement;  \n    public CheckInState(Room hotelManagement) {  \n        this.hotelManagement = hotelManagement;  \n    }  \n  \n    public void bookRoom() {  \n        System.out.println(\"该房间已经入住了...\");  \n    }  \n  \n    public void checkInRoom() {  \n        System.out.println(\"该房间已经入住了...\");  \n    }  \n  \n    public void checkOutRoom() {  \n        System.out.println(\"退房成功....\");  \n        hotelManagement.setState(hotelManagement.getFreeTimeState());     //状态变成空闲  \n    }  \n  \n    public void unsubscribeRoom() {  \n        //不需要做操作  \n    }  \n  \n}  \n```\n\n## 3.3 测试类\n```\npublic class Test {  \n    public static void main(String[] args) {  \n        //有3间房  \n        Room[] rooms = new Room[2];  \n        //初始化  \n        for(int i = 0 ; i < rooms.length ; i++){  \n            rooms[i] = new Room();  \n        }  \n        //第一间房  \n        rooms[0].bookRoom();    //预订  \n        rooms[0].checkInRoom();   //入住  \n        rooms[0].bookRoom();    //预订  \n        System.out.println(rooms[0]);  \n        System.out.println(\"---------------------------\");  \n          \n        //第二间房  \n        rooms[1].checkInRoom();  \n        rooms[1].bookRoom();  \n        rooms[1].checkOutRoom();  \n        rooms[1].bookRoom();  \n        System.out.println(rooms[1]);  \n    }  \n  \n}  \n```\n\n![](state_design_pattern/4.png)\n# 4总结\n\n## 1. 优点\n 1. 封装了转换规则。 \n 2. 枚举可能的状态，在枚举状态之前需要确定状态种类。 \n 3. 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 \n 4. 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 \n 5. 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n  \n## 2. 缺点\n1. 状态模式的使用必然会增加系统类和对象的个数。 \n2. 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。   \n3. 状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。\n\n# 五、模式适用场景\n1. 对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。 \n2. 代码中包含大量与对象状态有关的条件语句\n# 六、模式总结\n 1. 状态模式允许一个对象基于内部状态而拥有不同的行为。\n 2. Context会将行为委托给当前状态对象。\n 3. 状态模式对“开闭原则”支持不是很好。","slug":"state_design_pattern","published":1,"updated":"2017-05-08T09:35:36.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdlaz000hw0viaf74eh34","content":"<h1 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1 需求\"></a>1 需求</h1><p><img src=\"/2016/05/03/state_design_pattern/1.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实现客户  预定/入住/退订/退房  房间的功能</div></pre></td></tr></table></figure>\n<h2 id=\"1-1-不太华丽的实现-if-else\"><a href=\"#1-1-不太华丽的实现-if-else\" class=\"headerlink\" title=\"1.1 不太华丽的实现  if-else\"></a>1.1 不太华丽的实现  if-else</h2><p>常量定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int FREEMTIME_STATE = 0;  //空闲状态  </div><div class=\"line\">public static final int BOOKED_STATE = 1;     //已预订状态  </div><div class=\"line\">public static final int CHECKIN_STATE = 2;    //入住状态  </div><div class=\"line\">int state = FREEMTIME_STATE;     //初始状态</div></pre></td></tr></table></figure>\n<p>客户动作类（预定，入住，退订，退房）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** </div><div class=\"line\">     * @desc 预订 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;   //空闲可预订  </div><div class=\"line\">            if(count &gt; 0)&#123;  </div><div class=\"line\">                System.out.println(&quot;空闲房间，完成预订...&quot;);  </div><div class=\"line\">                state =  BOOKED_STATE;     //改变状态：已预订  </div><div class=\"line\">                count --;  </div><div class=\"line\">                //房间预订完了,提示客户没有房源了  </div><div class=\"line\">                if(count == 0)&#123;  </div><div class=\"line\">                    System.out.println(&quot;不好意思,房间已经预订完,欢迎您下次光临...&quot;);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;不好意思,已经没有房间了....&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经被预订了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经有人入住了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 入住 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">            if(count &gt; 0)&#123;  </div><div class=\"line\">                System.out.println(&quot;空闲房间，入住...&quot;);  </div><div class=\"line\">                state =  CHECKIN_STATE;     //改变状态：已预订  </div><div class=\"line\">                count --;  </div><div class=\"line\">                //房间预订完了,提示客户没有房源了  </div><div class=\"line\">                if(count == 0)&#123;  </div><div class=\"line\">                    System.out.println(&quot;不好意思,房间已经预订完,欢迎您下次光临...&quot;);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;不好意思,已经没有房间了....&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            if(&quot;如果该房间是您预订的&quot;)&#123;  </div><div class=\"line\">                System.out.println(&quot;入住....&quot;);  </div><div class=\"line\">                state = CHECKIN_STATE;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;您没有预订该房间,请先预订...&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 退订 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;已退订房间...&quot;);  </div><div class=\"line\">            state = FREEMTIME_STATE;  </div><div class=\"line\">            count ++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 退房 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;已退房..&quot;);  </div><div class=\"line\">            state = FREEMTIME_STATE;  </div><div class=\"line\">            count++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>当添加状态的时候，例如：损坏房间  则需要每个操作都要判断是否损坏房间</p>\n<h1 id=\"2-使用状态模式-华丽实现\"><a href=\"#2-使用状态模式-华丽实现\" class=\"headerlink\" title=\"2 使用状态模式 华丽实现\"></a>2 使用状态模式 华丽实现</h1><h2 id=\"2-1-模式定义\"><a href=\"#2-1-模式定义\" class=\"headerlink\" title=\"2.1 模式定义\"></a>2.1 模式定义</h2><ol>\n<li>在很多情况下，一个对象的行为取决于它的一个或多个变化的属性，这些属性我们称之为状态，这个对象称之为状态对象。对于状态对象而已，它的行为依赖于它的状态，比如你要预订房间，那么只有当该房间为空闲时你才能预订，你想入住该房间也只有当你预订了该房间或者该房间为空闲时。对于这样的一个对象，当它在于外部事件产生互动的时候，其内部状态就会发生改变，从而使得他的行为也随之发生改变。</li>\n<li>那么何为状态模式呢？所谓状态模式就是允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</li>\n</ol>\n<p><img src=\"/2016/05/03/state_design_pattern/2.png\" alt=\"\"></p>\n<pre><code>1.  状态模式包含如下角色： \n2.  Context: 环境类。可以包括一些内部状态。 \n3.  State: 抽象状态类。State定义了一个所有具体状态的共同接口，任何状态都实现这个相同的接口，这样一来，状态之间就可以互相转换了。 \n4.  ConcreteState:具体状态类。具体状态类，用于处理来自Context的请求，每一个ConcreteState都提供了它对自己请求的实现，所以，当Context改变状态时行为也会跟着改变。\n</code></pre><h1 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3 代码实现\"></a>3 代码实现</h1><p><img src=\"/2016/05/03/state_design_pattern/3.png\" alt=\"\"></p>\n<h2 id=\"3-1-状态接口代码：State-java\"><a href=\"#3-1-状态接口代码：State-java\" class=\"headerlink\" title=\"3.1 状态接口代码：State.java\"></a>3.1 状态接口代码：State.java</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface State &#123;  </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 预订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 入住  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退房  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom();  </div><div class=\"line\">      </div><div class=\"line\">&#125;  </div><div class=\"line\">       然后是房间类  </div><div class=\"line\">public class Room &#123;  </div><div class=\"line\">    /*  </div><div class=\"line\">     * 房间的三个状态  </div><div class=\"line\">     */  </div><div class=\"line\">    State freeTimeState;    //空闲状态  </div><div class=\"line\">    State checkInState;     //入住状态  </div><div class=\"line\">    State bookedState;      //预订状态  </div><div class=\"line\">  </div><div class=\"line\">    State state ;    </div><div class=\"line\">      </div><div class=\"line\">    public Room()&#123;  </div><div class=\"line\">        freeTimeState = new FreeTimeState(this);  </div><div class=\"line\">        checkInState = new CheckInState(this);  </div><div class=\"line\">        bookedState = new BookedState(this);  </div><div class=\"line\">          </div><div class=\"line\">        state = freeTimeState ;  //初始状态为空闲  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 预订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom()&#123;  </div><div class=\"line\">        state.bookRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom()&#123;  </div><div class=\"line\">        state.unsubscribeRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 入住  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom()&#123;  </div><div class=\"line\">        state.checkInRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退房  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom()&#123;  </div><div class=\"line\">        state.checkOutRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public String toString()&#123;  </div><div class=\"line\">        return &quot;该房间的状态是:&quot;+getState().getClass().getName();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /*  </div><div class=\"line\">     * getter和setter方法  </div><div class=\"line\">     */  </div><div class=\"line\">      </div><div class=\"line\">    public State getFreeTimeState() &#123;  </div><div class=\"line\">        return freeTimeState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setFreeTimeState(State freeTimeState) &#123;  </div><div class=\"line\">        this.freeTimeState = freeTimeState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getCheckInState() &#123;  </div><div class=\"line\">        return checkInState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setCheckInState(State checkInState) &#123;  </div><div class=\"line\">        this.checkInState = checkInState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getBookedState() &#123;  </div><div class=\"line\">        return bookedState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setBookedState(State bookedState) &#123;  </div><div class=\"line\">        this.bookedState = bookedState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getState() &#123;  </div><div class=\"line\">        return state;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setState(State state) &#123;  </div><div class=\"line\">        this.state = state;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-状态接口实现类：空闲，预定，入住\"><a href=\"#3-2-状态接口实现类：空闲，预定，入住\" class=\"headerlink\" title=\"3.2 状态接口实现类：空闲，预定，入住\"></a>3.2 状态接口实现类：空闲，预定，入住</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 空闲状态只能预订和入住 </div><div class=\"line\"> */  </div><div class=\"line\">public class FreeTimeState implements State &#123;  </div><div class=\"line\">      </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">      </div><div class=\"line\">    public FreeTimeState(Room hotelManagement)&#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;您已经成功预订了...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getBookedState());   //状态变成已经预订  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;您已经成功入住了...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getCheckInState());   //状态变成已经入住  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 入住状态房间只能退房 </div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\">public class BookedState implements State &#123;  </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">      </div><div class=\"line\">    public BookedState(Room hotelManagement) &#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已近给预定了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;入住成功...&quot;);   </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getCheckInState());         //状态变成入住  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;退订成功,欢迎下次光临...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getFreeTimeState());   //变成空闲状态  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 入住可以退房 </div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class CheckInState implements State &#123;  </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">    public CheckInState(Room hotelManagement) &#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;退房成功....&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getFreeTimeState());     //状态变成空闲  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试类\"><a href=\"#3-3-测试类\" class=\"headerlink\" title=\"3.3 测试类\"></a>3.3 测试类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;  </div><div class=\"line\">    public static void main(String[] args) &#123;  </div><div class=\"line\">        //有3间房  </div><div class=\"line\">        Room[] rooms = new Room[2];  </div><div class=\"line\">        //初始化  </div><div class=\"line\">        for(int i = 0 ; i &lt; rooms.length ; i++)&#123;  </div><div class=\"line\">            rooms[i] = new Room();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        //第一间房  </div><div class=\"line\">        rooms[0].bookRoom();    //预订  </div><div class=\"line\">        rooms[0].checkInRoom();   //入住  </div><div class=\"line\">        rooms[0].bookRoom();    //预订  </div><div class=\"line\">        System.out.println(rooms[0]);  </div><div class=\"line\">        System.out.println(&quot;---------------------------&quot;);  </div><div class=\"line\">          </div><div class=\"line\">        //第二间房  </div><div class=\"line\">        rooms[1].checkInRoom();  </div><div class=\"line\">        rooms[1].bookRoom();  </div><div class=\"line\">        rooms[1].checkOutRoom();  </div><div class=\"line\">        rooms[1].bookRoom();  </div><div class=\"line\">        System.out.println(rooms[1]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2016/05/03/state_design_pattern/4.png\" alt=\"\"></p>\n<h1 id=\"4总结\"><a href=\"#4总结\" class=\"headerlink\" title=\"4总结\"></a>4总结</h1><h2 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1. 优点\"></a>1. 优点</h2><ol>\n<li>封装了转换规则。 </li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ol>\n<h2 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h2><ol>\n<li>状态模式的使用必然会增加系统类和对象的个数。 </li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。   </li>\n<li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ol>\n<h1 id=\"五、模式适用场景\"><a href=\"#五、模式适用场景\" class=\"headerlink\" title=\"五、模式适用场景\"></a>五、模式适用场景</h1><ol>\n<li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。 </li>\n<li>代码中包含大量与对象状态有关的条件语句<h1 id=\"六、模式总结\"><a href=\"#六、模式总结\" class=\"headerlink\" title=\"六、模式总结\"></a>六、模式总结</h1><ol>\n<li>状态模式允许一个对象基于内部状态而拥有不同的行为。</li>\n<li>Context会将行为委托给当前状态对象。</li>\n<li>状态模式对“开闭原则”支持不是很好。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1 需求\"></a>1 需求</h1><p><img src=\"/2016/05/03/state_design_pattern/1.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实现客户  预定/入住/退订/退房  房间的功能</div></pre></td></tr></table></figure>\n<h2 id=\"1-1-不太华丽的实现-if-else\"><a href=\"#1-1-不太华丽的实现-if-else\" class=\"headerlink\" title=\"1.1 不太华丽的实现  if-else\"></a>1.1 不太华丽的实现  if-else</h2><p>常量定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int FREEMTIME_STATE = 0;  //空闲状态  </div><div class=\"line\">public static final int BOOKED_STATE = 1;     //已预订状态  </div><div class=\"line\">public static final int CHECKIN_STATE = 2;    //入住状态  </div><div class=\"line\">int state = FREEMTIME_STATE;     //初始状态</div></pre></td></tr></table></figure>\n<p>客户动作类（预定，入住，退订，退房）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** </div><div class=\"line\">     * @desc 预订 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;   //空闲可预订  </div><div class=\"line\">            if(count &gt; 0)&#123;  </div><div class=\"line\">                System.out.println(&quot;空闲房间，完成预订...&quot;);  </div><div class=\"line\">                state =  BOOKED_STATE;     //改变状态：已预订  </div><div class=\"line\">                count --;  </div><div class=\"line\">                //房间预订完了,提示客户没有房源了  </div><div class=\"line\">                if(count == 0)&#123;  </div><div class=\"line\">                    System.out.println(&quot;不好意思,房间已经预订完,欢迎您下次光临...&quot;);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;不好意思,已经没有房间了....&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经被预订了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经有人入住了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 入住 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">            if(count &gt; 0)&#123;  </div><div class=\"line\">                System.out.println(&quot;空闲房间，入住...&quot;);  </div><div class=\"line\">                state =  CHECKIN_STATE;     //改变状态：已预订  </div><div class=\"line\">                count --;  </div><div class=\"line\">                //房间预订完了,提示客户没有房源了  </div><div class=\"line\">                if(count == 0)&#123;  </div><div class=\"line\">                    System.out.println(&quot;不好意思,房间已经预订完,欢迎您下次光临...&quot;);  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;不好意思,已经没有房间了....&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            if(&quot;如果该房间是您预订的&quot;)&#123;  </div><div class=\"line\">                System.out.println(&quot;入住....&quot;);  </div><div class=\"line\">                state = CHECKIN_STATE;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            else&#123;  </div><div class=\"line\">                System.out.println(&quot;您没有预订该房间,请先预订...&quot;);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 退订 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;已退订房间...&quot;);  </div><div class=\"line\">            state = FREEMTIME_STATE;  </div><div class=\"line\">            count ++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /** </div><div class=\"line\">     * @desc 退房 </div><div class=\"line\">     * @return void </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom()&#123;  </div><div class=\"line\">        if(state == FREEMTIME_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == BOOKED_STATE)&#123;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(state == CHECKIN_STATE)&#123;  </div><div class=\"line\">            System.out.println(&quot;已退房..&quot;);  </div><div class=\"line\">            state = FREEMTIME_STATE;  </div><div class=\"line\">            count++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>当添加状态的时候，例如：损坏房间  则需要每个操作都要判断是否损坏房间</p>\n<h1 id=\"2-使用状态模式-华丽实现\"><a href=\"#2-使用状态模式-华丽实现\" class=\"headerlink\" title=\"2 使用状态模式 华丽实现\"></a>2 使用状态模式 华丽实现</h1><h2 id=\"2-1-模式定义\"><a href=\"#2-1-模式定义\" class=\"headerlink\" title=\"2.1 模式定义\"></a>2.1 模式定义</h2><ol>\n<li>在很多情况下，一个对象的行为取决于它的一个或多个变化的属性，这些属性我们称之为状态，这个对象称之为状态对象。对于状态对象而已，它的行为依赖于它的状态，比如你要预订房间，那么只有当该房间为空闲时你才能预订，你想入住该房间也只有当你预订了该房间或者该房间为空闲时。对于这样的一个对象，当它在于外部事件产生互动的时候，其内部状态就会发生改变，从而使得他的行为也随之发生改变。</li>\n<li>那么何为状态模式呢？所谓状态模式就是允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</li>\n</ol>\n<p><img src=\"/2016/05/03/state_design_pattern/2.png\" alt=\"\"></p>\n<pre><code>1.  状态模式包含如下角色： \n2.  Context: 环境类。可以包括一些内部状态。 \n3.  State: 抽象状态类。State定义了一个所有具体状态的共同接口，任何状态都实现这个相同的接口，这样一来，状态之间就可以互相转换了。 \n4.  ConcreteState:具体状态类。具体状态类，用于处理来自Context的请求，每一个ConcreteState都提供了它对自己请求的实现，所以，当Context改变状态时行为也会跟着改变。\n</code></pre><h1 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3 代码实现\"></a>3 代码实现</h1><p><img src=\"/2016/05/03/state_design_pattern/3.png\" alt=\"\"></p>\n<h2 id=\"3-1-状态接口代码：State-java\"><a href=\"#3-1-状态接口代码：State-java\" class=\"headerlink\" title=\"3.1 状态接口代码：State.java\"></a>3.1 状态接口代码：State.java</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface State &#123;  </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 预订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 入住  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom();  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退房  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom();  </div><div class=\"line\">      </div><div class=\"line\">&#125;  </div><div class=\"line\">       然后是房间类  </div><div class=\"line\">public class Room &#123;  </div><div class=\"line\">    /*  </div><div class=\"line\">     * 房间的三个状态  </div><div class=\"line\">     */  </div><div class=\"line\">    State freeTimeState;    //空闲状态  </div><div class=\"line\">    State checkInState;     //入住状态  </div><div class=\"line\">    State bookedState;      //预订状态  </div><div class=\"line\">  </div><div class=\"line\">    State state ;    </div><div class=\"line\">      </div><div class=\"line\">    public Room()&#123;  </div><div class=\"line\">        freeTimeState = new FreeTimeState(this);  </div><div class=\"line\">        checkInState = new CheckInState(this);  </div><div class=\"line\">        bookedState = new BookedState(this);  </div><div class=\"line\">          </div><div class=\"line\">        state = freeTimeState ;  //初始状态为空闲  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 预订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void bookRoom()&#123;  </div><div class=\"line\">        state.bookRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退订房间  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void unsubscribeRoom()&#123;  </div><div class=\"line\">        state.unsubscribeRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 入住  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkInRoom()&#123;  </div><div class=\"line\">        state.checkInRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /**  </div><div class=\"line\">     * @desc 退房  </div><div class=\"line\">     * @return void  </div><div class=\"line\">     */  </div><div class=\"line\">    public void checkOutRoom()&#123;  </div><div class=\"line\">        state.checkOutRoom();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public String toString()&#123;  </div><div class=\"line\">        return &quot;该房间的状态是:&quot;+getState().getClass().getName();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    /*  </div><div class=\"line\">     * getter和setter方法  </div><div class=\"line\">     */  </div><div class=\"line\">      </div><div class=\"line\">    public State getFreeTimeState() &#123;  </div><div class=\"line\">        return freeTimeState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setFreeTimeState(State freeTimeState) &#123;  </div><div class=\"line\">        this.freeTimeState = freeTimeState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getCheckInState() &#123;  </div><div class=\"line\">        return checkInState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setCheckInState(State checkInState) &#123;  </div><div class=\"line\">        this.checkInState = checkInState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getBookedState() &#123;  </div><div class=\"line\">        return bookedState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setBookedState(State bookedState) &#123;  </div><div class=\"line\">        this.bookedState = bookedState;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public State getState() &#123;  </div><div class=\"line\">        return state;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void setState(State state) &#123;  </div><div class=\"line\">        this.state = state;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-状态接口实现类：空闲，预定，入住\"><a href=\"#3-2-状态接口实现类：空闲，预定，入住\" class=\"headerlink\" title=\"3.2 状态接口实现类：空闲，预定，入住\"></a>3.2 状态接口实现类：空闲，预定，入住</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 空闲状态只能预订和入住 </div><div class=\"line\"> */  </div><div class=\"line\">public class FreeTimeState implements State &#123;  </div><div class=\"line\">      </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">      </div><div class=\"line\">    public FreeTimeState(Room hotelManagement)&#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;您已经成功预订了...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getBookedState());   //状态变成已经预订  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;您已经成功入住了...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getCheckInState());   //状态变成已经入住  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 入住状态房间只能退房 </div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\">public class BookedState implements State &#123;  </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">      </div><div class=\"line\">    public BookedState(Room hotelManagement) &#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已近给预定了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;入住成功...&quot;);   </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getCheckInState());         //状态变成入住  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;退订成功,欢迎下次光临...&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getFreeTimeState());   //变成空闲状态  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**  </div><div class=\"line\"> * @project: design_state   </div><div class=\"line\"> * @date 2013-8-24  </div><div class=\"line\"> * @Description: 入住可以退房 </div><div class=\"line\"> */  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class CheckInState implements State &#123;  </div><div class=\"line\">    Room hotelManagement;  </div><div class=\"line\">    public CheckInState(Room hotelManagement) &#123;  </div><div class=\"line\">        this.hotelManagement = hotelManagement;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void bookRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkInRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;该房间已经入住了...&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void checkOutRoom() &#123;  </div><div class=\"line\">        System.out.println(&quot;退房成功....&quot;);  </div><div class=\"line\">        hotelManagement.setState(hotelManagement.getFreeTimeState());     //状态变成空闲  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    public void unsubscribeRoom() &#123;  </div><div class=\"line\">        //不需要做操作  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试类\"><a href=\"#3-3-测试类\" class=\"headerlink\" title=\"3.3 测试类\"></a>3.3 测试类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;  </div><div class=\"line\">    public static void main(String[] args) &#123;  </div><div class=\"line\">        //有3间房  </div><div class=\"line\">        Room[] rooms = new Room[2];  </div><div class=\"line\">        //初始化  </div><div class=\"line\">        for(int i = 0 ; i &lt; rooms.length ; i++)&#123;  </div><div class=\"line\">            rooms[i] = new Room();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        //第一间房  </div><div class=\"line\">        rooms[0].bookRoom();    //预订  </div><div class=\"line\">        rooms[0].checkInRoom();   //入住  </div><div class=\"line\">        rooms[0].bookRoom();    //预订  </div><div class=\"line\">        System.out.println(rooms[0]);  </div><div class=\"line\">        System.out.println(&quot;---------------------------&quot;);  </div><div class=\"line\">          </div><div class=\"line\">        //第二间房  </div><div class=\"line\">        rooms[1].checkInRoom();  </div><div class=\"line\">        rooms[1].bookRoom();  </div><div class=\"line\">        rooms[1].checkOutRoom();  </div><div class=\"line\">        rooms[1].bookRoom();  </div><div class=\"line\">        System.out.println(rooms[1]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/2016/05/03/state_design_pattern/4.png\" alt=\"\"></p>\n<h1 id=\"4总结\"><a href=\"#4总结\" class=\"headerlink\" title=\"4总结\"></a>4总结</h1><h2 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1. 优点\"></a>1. 优点</h2><ol>\n<li>封装了转换规则。 </li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ol>\n<h2 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h2><ol>\n<li>状态模式的使用必然会增加系统类和对象的个数。 </li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。   </li>\n<li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ol>\n<h1 id=\"五、模式适用场景\"><a href=\"#五、模式适用场景\" class=\"headerlink\" title=\"五、模式适用场景\"></a>五、模式适用场景</h1><ol>\n<li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。 </li>\n<li>代码中包含大量与对象状态有关的条件语句<h1 id=\"六、模式总结\"><a href=\"#六、模式总结\" class=\"headerlink\" title=\"六、模式总结\"></a>六、模式总结</h1><ol>\n<li>状态模式允许一个对象基于内部状态而拥有不同的行为。</li>\n<li>Context会将行为委托给当前状态对象。</li>\n<li>状态模式对“开闭原则”支持不是很好。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"data_hub 数据同步","date":"2017-04-25T05:51:49.000Z","_content":"\n# data_hub 数据同步\n\t使用技术 ：active_mq,jms等 \n\tps : 不对外开放，个人理解\n\n# 生产者发送数据：\n\n1.  获取需要推送的第三方应用，ref_platform_app    简述：给那个第三方应用发\n\n2.  获取平台推送到第三方应用的对象列表（获取平台要发送到第三方哪些表（ref_queue_obj,ref_platform_app,push_obj）） 简述：要发哪些表\n\n3.  获取每个表需要推送哪些字段的集合（集合包含：表名，以及每个表需要同步的字段。当然还有上面的队列名）  简述：要发的表的里面哪些字段\n\n4. 表名，队列名.+detail_obj.name,平台唯一标识，objinfo(表名，表哪些列)     简述：无\n\n5.  查询该表下的所有字段 list<Obj<所有列>>  --通过比对是否在需要同步的列集合里面得到---》 list<obj<所规定列>>  getDatas  简述：根据表名查询所有列数据，然后再遍历列集合，筛选字段得到需要发送的最终数据   表1（字段1，字段3.....）\n\n6. 注意在getData时侯，需要根据路由表来判断该数据是否同步过，同步过的数据不再参与同步，对查询得到的数据进行增删改查的分类封装，保存查询到的数据列表    简述：分类需要发送的数据，增删改，还有加密参数\n\n7.  开始发送数据  （app的 accessKey为app_secret,队列名agent,）   简述：设置发送数据的优先级以及一些加密参数\n\n8.  第六步得到的数据列表ids  更新路由表，将同步标识更新，避免 5，6步得到的数据是已经同步过的\n\n\n\n# 消费者接收数据：\n\n监听消息队列获取消息，对消息进行解密验证，获取同步的数据信息，进行入数据库等操作\n\n\n\n# data_hub功能解释：\n\n1. 队列名：调用active_mq接口，主要是这个推送过程中产生的一些队列信息。每个队列的生产，消费情况列表。和平台无关，来源 active——mq\n\t\t\n1. 推送对象绑定：平台发送到应用，使用的队列名，以及每个推送关系，需要推送的表数据对象\n2. 用到的表：\n    1. ：ref_platform_app  (关联表 open_platfrom,open_app)   \n\t2. ：ref_queue_obj (表功能如：云平台1到手环1作为一次推送，这次推送绑定的对象是学生表，教师表。这个绑定关系是此表)\n\t3. ：push_obj 推送对象，即 数据中心支持发送的所有表数据。\n\t4. ：detail_obj  关联 push_obj\n\t5. ：detail_obj_column  每个对象对应的属性\n\t6. : route_*  路由表，判断数据是否同步过\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n# 关于爬虫\n\t/home/data_hub/node/下文件 \n\t安装 nodejs，npm，forever\n\t\n\t修改app.js中   YWRtaW46YWRtaW4=, jmsAdress为爬取页面地址头部\n\t\n\t修改之后启动  ： node app.js\n\t\n\t后台启动：forever start app.js\n\t\n\t```\n\tvar express = require('express');\n\t\tvar app = express();\n\t\tvar request = require('request');\n\t\tvar parseString = require('xml2js').parseString;\n\t\tvar jmsAdress = 'http://119.23.62.150:8161/admin/xml/queues.jsp';\n\t\t// var initAdress = 'http://114.215.29.139:10090/gkopen/rpc/init?tocken=2012335444456871128213845&&id='\n\n\t\t// var options = {\n\t\t//     hostname:'114.215.29.139',\n\t\t//     port:'8161',\n\t\t//     path:'/admin/xml/queues.sjp',\n\t\t//     method:'GET',\n\t\t//     // headers:{\n\t\t//     //     'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n\t\t//     //     'Accept-Encoding':'gzip, deflate',\n\t\t//     //     'Accept-Language':'zh-CN,zh;q=0.8',\n\t\t//     //     'Connection':'keep-alive',\n\t\t//     //     'Authorization':'Basic YWRtaW46bHh0ZXN0',\n\t\t//     //     'Cache-Control':'max-age=0',\n\t\t//     //     'Upgrade-Insecure-Requests':'1',\n\t\t//     //     'Host':'114.215.29.139:8161',\n\t\t//     //     'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36'\n\t\t//     // }\n\t\t// };\n\t\tapp.get('/queue/json', function(req,res){\n\t\t\trequest.get(jmsAdress,{headers:{'Authorization':'Basic YWRtaW46YWRtaW4='}},function(error,response,body){\n\t\t\t  if (error) {\n\t\t\t  return console.error('upload failed:', error);\n\t\t\t}\n\t\t\tconsole.log('Upload successful!  Server responded with:', body);\n\t\t\tparseString(body,function(error,data){\n\t\t\t  if (!error){\n\t\t\t\tvar _data = JSON.stringify(data)\n\t\t\t\tvar __data = _data.replace(/\\[/g,'');\n\t\t\t\tvar ___data = __data.replace(/\\]/g,'');\n\t\t\t\tvar ____data = ___data.replace('{\"queues\":{\"queue\":','[');\n\t\t\t\tvar _____data = ____data.replace('}}}}','}}]');\n\t\t\t\tvar data = JSON.parse(_____data);\n\t\t\t   res.jsonp(data);\n\t\t\t }\n\t\t\t})\n\t\t\t})\n\t\t});\n\n\t\t// app.get('/sync/init',function(req,res){\n\t\t  // var id = req.query.id;\n\t\t  // request.get(initAdress+id,function(error,response,body){\n\t\t\t// if (error){\n\t\t\t  // return console.error('error');\n\t\t\t// }\n\t\t\t// console.log('adress:',initAdress+id);\n\t\t\t  // console.log('id:',id);\n\t\t\t\t// console.log('body:',body);\n\t\t\t// res.redirect('http://127.0.0.1:11070/datahub/admin/sync');\n\t\t  // })\n\t\t// });\n\n\t\tvar server = app.listen(11060, function () {\n\t\t console.log(\"启动成功 11060\");\n\t\t})\n\t\t\n```\n\t\n\t\n\t\n\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t","source":"_posts/data_hub.md","raw":"---\ntitle: data_hub 数据同步\ndate: 2017-04-25 13:51:49\ntags: java\n---\n\n# data_hub 数据同步\n\t使用技术 ：active_mq,jms等 \n\tps : 不对外开放，个人理解\n\n# 生产者发送数据：\n\n1.  获取需要推送的第三方应用，ref_platform_app    简述：给那个第三方应用发\n\n2.  获取平台推送到第三方应用的对象列表（获取平台要发送到第三方哪些表（ref_queue_obj,ref_platform_app,push_obj）） 简述：要发哪些表\n\n3.  获取每个表需要推送哪些字段的集合（集合包含：表名，以及每个表需要同步的字段。当然还有上面的队列名）  简述：要发的表的里面哪些字段\n\n4. 表名，队列名.+detail_obj.name,平台唯一标识，objinfo(表名，表哪些列)     简述：无\n\n5.  查询该表下的所有字段 list<Obj<所有列>>  --通过比对是否在需要同步的列集合里面得到---》 list<obj<所规定列>>  getDatas  简述：根据表名查询所有列数据，然后再遍历列集合，筛选字段得到需要发送的最终数据   表1（字段1，字段3.....）\n\n6. 注意在getData时侯，需要根据路由表来判断该数据是否同步过，同步过的数据不再参与同步，对查询得到的数据进行增删改查的分类封装，保存查询到的数据列表    简述：分类需要发送的数据，增删改，还有加密参数\n\n7.  开始发送数据  （app的 accessKey为app_secret,队列名agent,）   简述：设置发送数据的优先级以及一些加密参数\n\n8.  第六步得到的数据列表ids  更新路由表，将同步标识更新，避免 5，6步得到的数据是已经同步过的\n\n\n\n# 消费者接收数据：\n\n监听消息队列获取消息，对消息进行解密验证，获取同步的数据信息，进行入数据库等操作\n\n\n\n# data_hub功能解释：\n\n1. 队列名：调用active_mq接口，主要是这个推送过程中产生的一些队列信息。每个队列的生产，消费情况列表。和平台无关，来源 active——mq\n\t\t\n1. 推送对象绑定：平台发送到应用，使用的队列名，以及每个推送关系，需要推送的表数据对象\n2. 用到的表：\n    1. ：ref_platform_app  (关联表 open_platfrom,open_app)   \n\t2. ：ref_queue_obj (表功能如：云平台1到手环1作为一次推送，这次推送绑定的对象是学生表，教师表。这个绑定关系是此表)\n\t3. ：push_obj 推送对象，即 数据中心支持发送的所有表数据。\n\t4. ：detail_obj  关联 push_obj\n\t5. ：detail_obj_column  每个对象对应的属性\n\t6. : route_*  路由表，判断数据是否同步过\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n# 关于爬虫\n\t/home/data_hub/node/下文件 \n\t安装 nodejs，npm，forever\n\t\n\t修改app.js中   YWRtaW46YWRtaW4=, jmsAdress为爬取页面地址头部\n\t\n\t修改之后启动  ： node app.js\n\t\n\t后台启动：forever start app.js\n\t\n\t```\n\tvar express = require('express');\n\t\tvar app = express();\n\t\tvar request = require('request');\n\t\tvar parseString = require('xml2js').parseString;\n\t\tvar jmsAdress = 'http://119.23.62.150:8161/admin/xml/queues.jsp';\n\t\t// var initAdress = 'http://114.215.29.139:10090/gkopen/rpc/init?tocken=2012335444456871128213845&&id='\n\n\t\t// var options = {\n\t\t//     hostname:'114.215.29.139',\n\t\t//     port:'8161',\n\t\t//     path:'/admin/xml/queues.sjp',\n\t\t//     method:'GET',\n\t\t//     // headers:{\n\t\t//     //     'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n\t\t//     //     'Accept-Encoding':'gzip, deflate',\n\t\t//     //     'Accept-Language':'zh-CN,zh;q=0.8',\n\t\t//     //     'Connection':'keep-alive',\n\t\t//     //     'Authorization':'Basic YWRtaW46bHh0ZXN0',\n\t\t//     //     'Cache-Control':'max-age=0',\n\t\t//     //     'Upgrade-Insecure-Requests':'1',\n\t\t//     //     'Host':'114.215.29.139:8161',\n\t\t//     //     'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36'\n\t\t//     // }\n\t\t// };\n\t\tapp.get('/queue/json', function(req,res){\n\t\t\trequest.get(jmsAdress,{headers:{'Authorization':'Basic YWRtaW46YWRtaW4='}},function(error,response,body){\n\t\t\t  if (error) {\n\t\t\t  return console.error('upload failed:', error);\n\t\t\t}\n\t\t\tconsole.log('Upload successful!  Server responded with:', body);\n\t\t\tparseString(body,function(error,data){\n\t\t\t  if (!error){\n\t\t\t\tvar _data = JSON.stringify(data)\n\t\t\t\tvar __data = _data.replace(/\\[/g,'');\n\t\t\t\tvar ___data = __data.replace(/\\]/g,'');\n\t\t\t\tvar ____data = ___data.replace('{\"queues\":{\"queue\":','[');\n\t\t\t\tvar _____data = ____data.replace('}}}}','}}]');\n\t\t\t\tvar data = JSON.parse(_____data);\n\t\t\t   res.jsonp(data);\n\t\t\t }\n\t\t\t})\n\t\t\t})\n\t\t});\n\n\t\t// app.get('/sync/init',function(req,res){\n\t\t  // var id = req.query.id;\n\t\t  // request.get(initAdress+id,function(error,response,body){\n\t\t\t// if (error){\n\t\t\t  // return console.error('error');\n\t\t\t// }\n\t\t\t// console.log('adress:',initAdress+id);\n\t\t\t  // console.log('id:',id);\n\t\t\t\t// console.log('body:',body);\n\t\t\t// res.redirect('http://127.0.0.1:11070/datahub/admin/sync');\n\t\t  // })\n\t\t// });\n\n\t\tvar server = app.listen(11060, function () {\n\t\t console.log(\"启动成功 11060\");\n\t\t})\n\t\t\n```\n\t\n\t\n\t\n\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t","slug":"data_hub","published":1,"updated":"2017-05-10T09:03:55.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2zrdlb5000jw0viffel5ehh","content":"<h1 id=\"data-hub-数据同步\"><a href=\"#data-hub-数据同步\" class=\"headerlink\" title=\"data_hub 数据同步\"></a>data_hub 数据同步</h1><pre><code>使用技术 ：active_mq,jms等 \nps : 不对外开放，个人理解\n</code></pre><h1 id=\"生产者发送数据：\"><a href=\"#生产者发送数据：\" class=\"headerlink\" title=\"生产者发送数据：\"></a>生产者发送数据：</h1><ol>\n<li><p>获取需要推送的第三方应用，ref_platform_app    简述：给那个第三方应用发</p>\n</li>\n<li><p>获取平台推送到第三方应用的对象列表（获取平台要发送到第三方哪些表（ref_queue_obj,ref_platform_app,push_obj）） 简述：要发哪些表</p>\n</li>\n<li><p>获取每个表需要推送哪些字段的集合（集合包含：表名，以及每个表需要同步的字段。当然还有上面的队列名）  简述：要发的表的里面哪些字段</p>\n</li>\n<li><p>表名，队列名.+detail_obj.name,平台唯一标识，objinfo(表名，表哪些列)     简述：无</p>\n</li>\n<li><p>查询该表下的所有字段 list<obj<所有列>&gt;  –通过比对是否在需要同步的列集合里面得到—》 list<obj<所规定列>&gt;  getDatas  简述：根据表名查询所有列数据，然后再遍历列集合，筛选字段得到需要发送的最终数据   表1（字段1，字段3…..）</obj<所规定列></obj<所有列></p>\n</li>\n<li><p>注意在getData时侯，需要根据路由表来判断该数据是否同步过，同步过的数据不再参与同步，对查询得到的数据进行增删改查的分类封装，保存查询到的数据列表    简述：分类需要发送的数据，增删改，还有加密参数</p>\n</li>\n<li><p>开始发送数据  （app的 accessKey为app_secret,队列名agent,）   简述：设置发送数据的优先级以及一些加密参数</p>\n</li>\n<li><p>第六步得到的数据列表ids  更新路由表，将同步标识更新，避免 5，6步得到的数据是已经同步过的</p>\n</li>\n</ol>\n<h1 id=\"消费者接收数据：\"><a href=\"#消费者接收数据：\" class=\"headerlink\" title=\"消费者接收数据：\"></a>消费者接收数据：</h1><p>监听消息队列获取消息，对消息进行解密验证，获取同步的数据信息，进行入数据库等操作</p>\n<h1 id=\"data-hub功能解释：\"><a href=\"#data-hub功能解释：\" class=\"headerlink\" title=\"data_hub功能解释：\"></a>data_hub功能解释：</h1><ol>\n<li><p>队列名：调用active_mq接口，主要是这个推送过程中产生的一些队列信息。每个队列的生产，消费情况列表。和平台无关，来源 active——mq</p>\n</li>\n<li><p>推送对象绑定：平台发送到应用，使用的队列名，以及每个推送关系，需要推送的表数据对象</p>\n</li>\n<li>用到的表：<ol>\n<li>：ref_platform_app  (关联表 open_platfrom,open_app)   </li>\n<li>：ref_queue_obj (表功能如：云平台1到手环1作为一次推送，这次推送绑定的对象是学生表，教师表。这个绑定关系是此表)</li>\n<li>：push_obj 推送对象，即 数据中心支持发送的所有表数据。</li>\n<li>：detail_obj  关联 push_obj</li>\n<li>：detail_obj_column  每个对象对应的属性</li>\n<li>: route_*  路由表，判断数据是否同步过</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"关于爬虫\"><a href=\"#关于爬虫\" class=\"headerlink\" title=\"关于爬虫\"></a>关于爬虫</h1><pre><code>/home/data_hub/node/下文件 \n安装 nodejs，npm，forever\n\n修改app.js中   YWRtaW46YWRtaW4=, jmsAdress为爬取页面地址头部\n\n修改之后启动  ： node app.js\n\n后台启动：forever start app.js\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">\tvar app = express();</div><div class=\"line\">\tvar request = require(&apos;request&apos;);</div><div class=\"line\">\tvar parseString = require(&apos;xml2js&apos;).parseString;</div><div class=\"line\">\tvar jmsAdress = &apos;http://119.23.62.150:8161/admin/xml/queues.jsp&apos;;</div><div class=\"line\">\t// var initAdress = &apos;http://114.215.29.139:10090/gkopen/rpc/init?tocken=2012335444456871128213845&amp;&amp;id=&apos;</div><div class=\"line\"></div><div class=\"line\">\t// var options = &#123;</div><div class=\"line\">\t//     hostname:&apos;114.215.29.139&apos;,</div><div class=\"line\">\t//     port:&apos;8161&apos;,</div><div class=\"line\">\t//     path:&apos;/admin/xml/queues.sjp&apos;,</div><div class=\"line\">\t//     method:&apos;GET&apos;,</div><div class=\"line\">\t//     // headers:&#123;</div><div class=\"line\">\t//     //     &apos;Accept&apos;:&apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class=\"line\">\t//     //     &apos;Accept-Encoding&apos;:&apos;gzip, deflate&apos;,</div><div class=\"line\">\t//     //     &apos;Accept-Language&apos;:&apos;zh-CN,zh;q=0.8&apos;,</div><div class=\"line\">\t//     //     &apos;Connection&apos;:&apos;keep-alive&apos;,</div><div class=\"line\">\t//     //     &apos;Authorization&apos;:&apos;Basic YWRtaW46bHh0ZXN0&apos;,</div><div class=\"line\">\t//     //     &apos;Cache-Control&apos;:&apos;max-age=0&apos;,</div><div class=\"line\">\t//     //     &apos;Upgrade-Insecure-Requests&apos;:&apos;1&apos;,</div><div class=\"line\">\t//     //     &apos;Host&apos;:&apos;114.215.29.139:8161&apos;,</div><div class=\"line\">\t//     //     &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36&apos;</div><div class=\"line\">\t//     // &#125;</div><div class=\"line\">\t// &#125;;</div><div class=\"line\">\tapp.get(&apos;/queue/json&apos;, function(req,res)&#123;</div><div class=\"line\">\t\trequest.get(jmsAdress,&#123;headers:&#123;&apos;Authorization&apos;:&apos;Basic YWRtaW46YWRtaW4=&apos;&#125;&#125;,function(error,response,body)&#123;</div><div class=\"line\">\t\t  if (error) &#123;</div><div class=\"line\">\t\t  return console.error(&apos;upload failed:&apos;, error);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tconsole.log(&apos;Upload successful!  Server responded with:&apos;, body);</div><div class=\"line\">\t\tparseString(body,function(error,data)&#123;</div><div class=\"line\">\t\t  if (!error)&#123;</div><div class=\"line\">\t\t\tvar _data = JSON.stringify(data)</div><div class=\"line\">\t\t\tvar __data = _data.replace(/\\[/g,&apos;&apos;);</div><div class=\"line\">\t\t\tvar ___data = __data.replace(/\\]/g,&apos;&apos;);</div><div class=\"line\">\t\t\tvar ____data = ___data.replace(&apos;&#123;&quot;queues&quot;:&#123;&quot;queue&quot;:&apos;,&apos;[&apos;);</div><div class=\"line\">\t\t\tvar _____data = ____data.replace(&apos;&#125;&#125;&#125;&#125;&apos;,&apos;&#125;&#125;]&apos;);</div><div class=\"line\">\t\t\tvar data = JSON.parse(_____data);</div><div class=\"line\">\t\t   res.jsonp(data);</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t// app.get(&apos;/sync/init&apos;,function(req,res)&#123;</div><div class=\"line\">\t  // var id = req.query.id;</div><div class=\"line\">\t  // request.get(initAdress+id,function(error,response,body)&#123;</div><div class=\"line\">\t\t// if (error)&#123;</div><div class=\"line\">\t\t  // return console.error(&apos;error&apos;);</div><div class=\"line\">\t\t// &#125;</div><div class=\"line\">\t\t// console.log(&apos;adress:&apos;,initAdress+id);</div><div class=\"line\">\t\t  // console.log(&apos;id:&apos;,id);</div><div class=\"line\">\t\t\t// console.log(&apos;body:&apos;,body);</div><div class=\"line\">\t\t// res.redirect(&apos;http://127.0.0.1:11070/datahub/admin/sync&apos;);</div><div class=\"line\">\t  // &#125;)</div><div class=\"line\">\t// &#125;);</div><div class=\"line\"></div><div class=\"line\">\tvar server = app.listen(11060, function () &#123;</div><div class=\"line\">\t console.log(&quot;启动成功 11060&quot;);</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"data-hub-数据同步\"><a href=\"#data-hub-数据同步\" class=\"headerlink\" title=\"data_hub 数据同步\"></a>data_hub 数据同步</h1><pre><code>使用技术 ：active_mq,jms等 \nps : 不对外开放，个人理解\n</code></pre><h1 id=\"生产者发送数据：\"><a href=\"#生产者发送数据：\" class=\"headerlink\" title=\"生产者发送数据：\"></a>生产者发送数据：</h1><ol>\n<li><p>获取需要推送的第三方应用，ref_platform_app    简述：给那个第三方应用发</p>\n</li>\n<li><p>获取平台推送到第三方应用的对象列表（获取平台要发送到第三方哪些表（ref_queue_obj,ref_platform_app,push_obj）） 简述：要发哪些表</p>\n</li>\n<li><p>获取每个表需要推送哪些字段的集合（集合包含：表名，以及每个表需要同步的字段。当然还有上面的队列名）  简述：要发的表的里面哪些字段</p>\n</li>\n<li><p>表名，队列名.+detail_obj.name,平台唯一标识，objinfo(表名，表哪些列)     简述：无</p>\n</li>\n<li><p>查询该表下的所有字段 list<Obj<所有列>&gt;  –通过比对是否在需要同步的列集合里面得到—》 list<obj<所规定列>&gt;  getDatas  简述：根据表名查询所有列数据，然后再遍历列集合，筛选字段得到需要发送的最终数据   表1（字段1，字段3…..）</obj<所规定列></Obj<所有列></p>\n</li>\n<li><p>注意在getData时侯，需要根据路由表来判断该数据是否同步过，同步过的数据不再参与同步，对查询得到的数据进行增删改查的分类封装，保存查询到的数据列表    简述：分类需要发送的数据，增删改，还有加密参数</p>\n</li>\n<li><p>开始发送数据  （app的 accessKey为app_secret,队列名agent,）   简述：设置发送数据的优先级以及一些加密参数</p>\n</li>\n<li><p>第六步得到的数据列表ids  更新路由表，将同步标识更新，避免 5，6步得到的数据是已经同步过的</p>\n</li>\n</ol>\n<h1 id=\"消费者接收数据：\"><a href=\"#消费者接收数据：\" class=\"headerlink\" title=\"消费者接收数据：\"></a>消费者接收数据：</h1><p>监听消息队列获取消息，对消息进行解密验证，获取同步的数据信息，进行入数据库等操作</p>\n<h1 id=\"data-hub功能解释：\"><a href=\"#data-hub功能解释：\" class=\"headerlink\" title=\"data_hub功能解释：\"></a>data_hub功能解释：</h1><ol>\n<li><p>队列名：调用active_mq接口，主要是这个推送过程中产生的一些队列信息。每个队列的生产，消费情况列表。和平台无关，来源 active——mq</p>\n</li>\n<li><p>推送对象绑定：平台发送到应用，使用的队列名，以及每个推送关系，需要推送的表数据对象</p>\n</li>\n<li>用到的表：<ol>\n<li>：ref_platform_app  (关联表 open_platfrom,open_app)   </li>\n<li>：ref_queue_obj (表功能如：云平台1到手环1作为一次推送，这次推送绑定的对象是学生表，教师表。这个绑定关系是此表)</li>\n<li>：push_obj 推送对象，即 数据中心支持发送的所有表数据。</li>\n<li>：detail_obj  关联 push_obj</li>\n<li>：detail_obj_column  每个对象对应的属性</li>\n<li>: route_*  路由表，判断数据是否同步过</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"关于爬虫\"><a href=\"#关于爬虫\" class=\"headerlink\" title=\"关于爬虫\"></a>关于爬虫</h1><pre><code>/home/data_hub/node/下文件 \n安装 nodejs，npm，forever\n\n修改app.js中   YWRtaW46YWRtaW4=, jmsAdress为爬取页面地址头部\n\n修改之后启动  ： node app.js\n\n后台启动：forever start app.js\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">\tvar app = express();</div><div class=\"line\">\tvar request = require(&apos;request&apos;);</div><div class=\"line\">\tvar parseString = require(&apos;xml2js&apos;).parseString;</div><div class=\"line\">\tvar jmsAdress = &apos;http://119.23.62.150:8161/admin/xml/queues.jsp&apos;;</div><div class=\"line\">\t// var initAdress = &apos;http://114.215.29.139:10090/gkopen/rpc/init?tocken=2012335444456871128213845&amp;&amp;id=&apos;</div><div class=\"line\"></div><div class=\"line\">\t// var options = &#123;</div><div class=\"line\">\t//     hostname:&apos;114.215.29.139&apos;,</div><div class=\"line\">\t//     port:&apos;8161&apos;,</div><div class=\"line\">\t//     path:&apos;/admin/xml/queues.sjp&apos;,</div><div class=\"line\">\t//     method:&apos;GET&apos;,</div><div class=\"line\">\t//     // headers:&#123;</div><div class=\"line\">\t//     //     &apos;Accept&apos;:&apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class=\"line\">\t//     //     &apos;Accept-Encoding&apos;:&apos;gzip, deflate&apos;,</div><div class=\"line\">\t//     //     &apos;Accept-Language&apos;:&apos;zh-CN,zh;q=0.8&apos;,</div><div class=\"line\">\t//     //     &apos;Connection&apos;:&apos;keep-alive&apos;,</div><div class=\"line\">\t//     //     &apos;Authorization&apos;:&apos;Basic YWRtaW46bHh0ZXN0&apos;,</div><div class=\"line\">\t//     //     &apos;Cache-Control&apos;:&apos;max-age=0&apos;,</div><div class=\"line\">\t//     //     &apos;Upgrade-Insecure-Requests&apos;:&apos;1&apos;,</div><div class=\"line\">\t//     //     &apos;Host&apos;:&apos;114.215.29.139:8161&apos;,</div><div class=\"line\">\t//     //     &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36&apos;</div><div class=\"line\">\t//     // &#125;</div><div class=\"line\">\t// &#125;;</div><div class=\"line\">\tapp.get(&apos;/queue/json&apos;, function(req,res)&#123;</div><div class=\"line\">\t\trequest.get(jmsAdress,&#123;headers:&#123;&apos;Authorization&apos;:&apos;Basic YWRtaW46YWRtaW4=&apos;&#125;&#125;,function(error,response,body)&#123;</div><div class=\"line\">\t\t  if (error) &#123;</div><div class=\"line\">\t\t  return console.error(&apos;upload failed:&apos;, error);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tconsole.log(&apos;Upload successful!  Server responded with:&apos;, body);</div><div class=\"line\">\t\tparseString(body,function(error,data)&#123;</div><div class=\"line\">\t\t  if (!error)&#123;</div><div class=\"line\">\t\t\tvar _data = JSON.stringify(data)</div><div class=\"line\">\t\t\tvar __data = _data.replace(/\\[/g,&apos;&apos;);</div><div class=\"line\">\t\t\tvar ___data = __data.replace(/\\]/g,&apos;&apos;);</div><div class=\"line\">\t\t\tvar ____data = ___data.replace(&apos;&#123;&quot;queues&quot;:&#123;&quot;queue&quot;:&apos;,&apos;[&apos;);</div><div class=\"line\">\t\t\tvar _____data = ____data.replace(&apos;&#125;&#125;&#125;&#125;&apos;,&apos;&#125;&#125;]&apos;);</div><div class=\"line\">\t\t\tvar data = JSON.parse(_____data);</div><div class=\"line\">\t\t   res.jsonp(data);</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t// app.get(&apos;/sync/init&apos;,function(req,res)&#123;</div><div class=\"line\">\t  // var id = req.query.id;</div><div class=\"line\">\t  // request.get(initAdress+id,function(error,response,body)&#123;</div><div class=\"line\">\t\t// if (error)&#123;</div><div class=\"line\">\t\t  // return console.error(&apos;error&apos;);</div><div class=\"line\">\t\t// &#125;</div><div class=\"line\">\t\t// console.log(&apos;adress:&apos;,initAdress+id);</div><div class=\"line\">\t\t  // console.log(&apos;id:&apos;,id);</div><div class=\"line\">\t\t\t// console.log(&apos;body:&apos;,body);</div><div class=\"line\">\t\t// res.redirect(&apos;http://127.0.0.1:11070/datahub/admin/sync&apos;);</div><div class=\"line\">\t  // &#125;)</div><div class=\"line\">\t// &#125;);</div><div class=\"line\"></div><div class=\"line\">\tvar server = app.listen(11060, function () &#123;</div><div class=\"line\">\t console.log(&quot;启动成功 11060&quot;);</div><div class=\"line\">\t&#125;)</div></pre></td></tr></table></figure>\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/active_mq/index.png","slug":"index.png","post":"cj2zrdl7u0001w0vir5j6nvjz","modified":0,"renderable":0},{"_id":"source/_posts/active_mq/user.png","slug":"user.png","post":"cj2zrdl7u0001w0vir5j6nvjz","modified":0,"renderable":0},{"_id":"source/_posts/nginx/1.png","slug":"1.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/2.png","slug":"2.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/3.png","slug":"3.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/4.png","slug":"4.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/5.png","slug":"5.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/6.png","slug":"6.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/nginx/7.png","slug":"7.png","post":"cj2zrdl8n0005w0viwnfl0wi4","modified":0,"renderable":0},{"_id":"source/_posts/state_design_pattern/1.png","slug":"1.png","post":"cj2zrdlaz000hw0viaf74eh34","modified":0,"renderable":0},{"_id":"source/_posts/state_design_pattern/2.png","slug":"2.png","post":"cj2zrdlaz000hw0viaf74eh34","modified":0,"renderable":0},{"_id":"source/_posts/state_design_pattern/3.png","slug":"3.png","post":"cj2zrdlaz000hw0viaf74eh34","modified":0,"renderable":0},{"_id":"source/_posts/state_design_pattern/4.png","slug":"4.png","post":"cj2zrdlaz000hw0viaf74eh34","modified":0,"renderable":0},{"_id":"source/_posts/state_design_pattern/几种自动排课算法的比较.pdf","slug":"几种自动排课算法的比较.pdf","post":"cj2zrdlaz000hw0viaf74eh34","modified":0,"renderable":0},{"_id":"source/_posts/first/images/tom.png","slug":"images\\tom.png","post":"cj2zrdl870003w0vi1l9oytql","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj2zrdl8c0004w0vihqekttnd","tag_id":"cj2zrdl810002w0vidlqa8p7l","_id":"cj2zrdl8p0007w0vicz751smd"},{"post_id":"cj2zrdl8r0008w0vimhoe26d2","tag_id":"cj2zrdl8o0006w0vih8r6d4qo","_id":"cj2zrdl93000bw0vivitsmpne"},{"post_id":"cj2zrdl7u0001w0vir5j6nvjz","tag_id":"cj2zrdl8o0006w0vih8r6d4qo","_id":"cj2zrdl94000cw0viev4g24ov"},{"post_id":"cj2zrdl870003w0vi1l9oytql","tag_id":"cj2zrdl8o0006w0vih8r6d4qo","_id":"cj2zrdl98000ew0vi7acjw56g"},{"post_id":"cj2zrdl8n0005w0viwnfl0wi4","tag_id":"cj2zrdl8o0006w0vih8r6d4qo","_id":"cj2zrdl9a000fw0vigv8msww9"},{"post_id":"cj2zrdlat000gw0vi99nzeydg","tag_id":"cj2zrdl810002w0vidlqa8p7l","_id":"cj2zrdlb2000iw0vinsvysxvz"},{"post_id":"cj2zrdlaz000hw0viaf74eh34","tag_id":"cj2zrdl810002w0vidlqa8p7l","_id":"cj2zrdlb8000kw0vi85y27nfb"},{"post_id":"cj2zrdlb5000jw0viffel5ehh","tag_id":"cj2zrdl810002w0vidlqa8p7l","_id":"cj2zrdlbc000lw0vikzwdqm04"}],"Tag":[{"name":"java","_id":"cj2zrdl810002w0vidlqa8p7l"},{"name":"server,linux,ubuntu","_id":"cj2zrdl8o0006w0vih8r6d4qo"}]}}